{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Syfala Toolchain Documentation This is the Syfala documentation website. Please, refer to the \"Manual\" tab above for more information.","title":"Home"},{"location":"#syfala-toolchain-documentation","text":"This is the Syfala documentation website. Please, refer to the \"Manual\" tab above for more information.","title":"Syfala Toolchain Documentation"},{"location":"manual/dependencies/","text":"Syfala Toolchain Dependencies The Syfala toolchain is a compilation toolchain of Faust programs onto AMD-Xilinx FPGA targets. This document explains how to install and run the version 0.7.1 of the toolchain on a Linux machine. In practice, installing the Syfala toolchain means: Installing the required linux-packages , depending on your Linux distribution. Installing the Faust compiler Creating a AMD-Xilinx account and downloading/installing the 2022.2 version (2020.2 is also still supported) of the AMD-Xilinx toolchain (providing softwares such as Vivado, Vitis, Vitis HLS). Installing the additional Vivado Board Files for Digilent Boards. Installing udev rules in order to use the JTAG connection. Cloning the Syfala repository , and running a simple example to make sure everything is working properly. Linux Targets We recommend using Ubuntu (>= 18.04 LTS) for installing and using the toolchain, since it is officially supported by AMD-Xilinx. While it is still possible to use other distributions, such as Archlinux, you may encounter unresolved bugs, which won't necessarily appear in our Troubleshooting section below. Ubuntu Dependencies $ sudo apt-get update $ sudo apt-get install git libncurses5 libtinfo-dev build-essential default-jre pkg-config g++-multilib gtk+2.0 locales Archlinux Dependencies # faust (required) $ sudo pacman -S faust # for xilinx vivado/vitis etc. $ yay -S ncurses5-compat-libs libxcrypt-compat libpng12 lib32-libpng12 xorg-xlsclients gtk2 Faust It is recommended to clone Faust from the official github repository: https://github.com/grame-cncm/faust $ git clone https://github.com/grame-cncm/faust.git $ cd faust $ make $ sudo make install Vivado, Vitis & Vitis HLS (2022.2 version) Open an account on https://www.xilinx.com/registration The AMD-Xilinx download page contains links for downloading the Vivado Design Suite - HLx Editions - Full Product . It is available for both Linux and Windows. Download the Linux installer Xilinx_Unified_2022.2_1014_8888_Lin64.bin Execute chmod a+x Xilinx_Unified_2022.2_1014_8888_Lin64.bin Execute ./Xilinx_Unified_2022.2_1014_8888_Lin64.bin We suggest to use the \" Download Image (Install Separately) \" option. It creates a directory with a xsetup file to execute that you can reuse in case of failure during the installation Execute ./xsetup Choose to install Vitis (it will still install Vivado , Vitis , and Vitis HLS ). It will need 110GB of disk space : if you uncheck Ultrascale , Ultrascale+ , Versal ACAP and Alveo acceleration platform , it will use less space and still work. Agree with everything and choose a directory to install (e.g. ~/Xilinx) Install and wait (it may take quite a while) Setup a shell environment variable allowing to use the tools when necessary (add this to your ~/.bashrc , ~/.zshrc or whatever you're currently using, replacing $XILINX_ROOT_DIR by the directory you chose to install all the tools) shell export XILINX_ROOT_DIR=$HOME/Xilinx Installing Cable Drivers on Linux Go to: $XILINX_ROOT_DIR/Vivado/2022.2/data/xicom/cable_drivers/lin64/install_script/install_drivers directory Run ./install_drivers Run sudo cp 52-xilinx-digilent-usb.rules /etc/udev/rules.d , this allows JTAG connection through USB . Installing Digilent Board Files Download the board files from github : Open the folder extracted from the archive and navigate to its new/board_files folder. You will be copying all of this folder's subfolders For the 2020.2 version, go to $XILINX_ROOT_DIR/Vivado/2020.2/data/boards/board_files For the 2022.2 version, go to $XILINX_ROOT_DIR/Vivado/2022.2/data/xhub/boards/XilinxBoardStore/boards/Xilinx Copy all of the folders found in vivado-boards new/board_files folder and paste them into this folder Installing the 2022 patch (AMD-Xilinx toolchain v2020.2 only) Vivado and Vitis tools that use HLS in the background are also affected by this issue. HLS tools set the ip_version in the format YYMMDDHHMM and this value is accessed as a signed integer (32-bit) that causes an overflow and generates the errors below (or something similar). Follow this link: https://support.xilinx.com/s/article/76960?language=en_US Download the file at the bottom of th page and unzip it in $XILINX_ROOT_DIR run the following commands: shell $ cd $XILINX_ROOT_DIR $ export LD_LIBRARY_PATH=$PWD/Vivado/2020.2/tps/lnx64/python-3.8.3/lib/ $ Vivado/2020.2/tps/lnx64/python-3.8.3/bin/python3 y2k22_patch/patch.py Cloning the Syfala Repository To clone and install the latest stable version of the Syfala toolchain, you can use the following commands: $ git clone https://github.com/inria-emeraude/syfala $ cd syfala $ ./syfala.tcl install $ syfala --help In order to use the Syfala toolchain to compile your first example, please report to the main README file located in the repository's root directory. Troubleshooting On Archlinux , if you see an error like this one /lib/../lib64/crti.o: file not recognized: File format not recognized you'll have to rename the Vivado/2020.2/tps/lnx64/binutils-2.26 (Vitis will then search in the system libraries). Vitis/Java Issues On recent systems (or with Archlinux ), you might have problems compiling the host-side ( ARM ) application. The problem is caused by system libraries requiring newer versions of GCC than the one provided by Vitis. Replacing GCC target in Vitis' path by system GCC works: $ cd $XILINX_ROOT_DIR/Vitis/2020.2/lib/lnx64.o/Default $ mv libstdc++.so.6 libstdc++.so.6.old $ rm -rf libstdc++.so (symlink) $ sudo ln -s /usr/lib/libstdc++.so.6 libstdc++.so.6","title":"Dependencies"},{"location":"manual/dependencies/#syfala-toolchain-dependencies","text":"The Syfala toolchain is a compilation toolchain of Faust programs onto AMD-Xilinx FPGA targets. This document explains how to install and run the version 0.7.1 of the toolchain on a Linux machine. In practice, installing the Syfala toolchain means: Installing the required linux-packages , depending on your Linux distribution. Installing the Faust compiler Creating a AMD-Xilinx account and downloading/installing the 2022.2 version (2020.2 is also still supported) of the AMD-Xilinx toolchain (providing softwares such as Vivado, Vitis, Vitis HLS). Installing the additional Vivado Board Files for Digilent Boards. Installing udev rules in order to use the JTAG connection. Cloning the Syfala repository , and running a simple example to make sure everything is working properly.","title":"Syfala Toolchain Dependencies"},{"location":"manual/dependencies/#linux-targets","text":"We recommend using Ubuntu (>= 18.04 LTS) for installing and using the toolchain, since it is officially supported by AMD-Xilinx. While it is still possible to use other distributions, such as Archlinux, you may encounter unresolved bugs, which won't necessarily appear in our Troubleshooting section below.","title":"Linux Targets"},{"location":"manual/dependencies/#ubuntu-dependencies","text":"$ sudo apt-get update $ sudo apt-get install git libncurses5 libtinfo-dev build-essential default-jre pkg-config g++-multilib gtk+2.0 locales","title":"Ubuntu Dependencies"},{"location":"manual/dependencies/#archlinux-dependencies","text":"# faust (required) $ sudo pacman -S faust # for xilinx vivado/vitis etc. $ yay -S ncurses5-compat-libs libxcrypt-compat libpng12 lib32-libpng12 xorg-xlsclients gtk2","title":"Archlinux Dependencies"},{"location":"manual/dependencies/#faust","text":"It is recommended to clone Faust from the official github repository: https://github.com/grame-cncm/faust $ git clone https://github.com/grame-cncm/faust.git $ cd faust $ make $ sudo make install","title":"Faust"},{"location":"manual/dependencies/#vivado-vitis-vitis-hls-20222-version","text":"Open an account on https://www.xilinx.com/registration The AMD-Xilinx download page contains links for downloading the Vivado Design Suite - HLx Editions - Full Product . It is available for both Linux and Windows. Download the Linux installer Xilinx_Unified_2022.2_1014_8888_Lin64.bin Execute chmod a+x Xilinx_Unified_2022.2_1014_8888_Lin64.bin Execute ./Xilinx_Unified_2022.2_1014_8888_Lin64.bin We suggest to use the \" Download Image (Install Separately) \" option. It creates a directory with a xsetup file to execute that you can reuse in case of failure during the installation Execute ./xsetup Choose to install Vitis (it will still install Vivado , Vitis , and Vitis HLS ). It will need 110GB of disk space : if you uncheck Ultrascale , Ultrascale+ , Versal ACAP and Alveo acceleration platform , it will use less space and still work. Agree with everything and choose a directory to install (e.g. ~/Xilinx) Install and wait (it may take quite a while) Setup a shell environment variable allowing to use the tools when necessary (add this to your ~/.bashrc , ~/.zshrc or whatever you're currently using, replacing $XILINX_ROOT_DIR by the directory you chose to install all the tools) shell export XILINX_ROOT_DIR=$HOME/Xilinx","title":"Vivado, Vitis &amp; Vitis HLS (2022.2 version)"},{"location":"manual/dependencies/#installing-cable-drivers-on-linux","text":"Go to: $XILINX_ROOT_DIR/Vivado/2022.2/data/xicom/cable_drivers/lin64/install_script/install_drivers directory Run ./install_drivers Run sudo cp 52-xilinx-digilent-usb.rules /etc/udev/rules.d , this allows JTAG connection through USB .","title":"Installing Cable Drivers on Linux"},{"location":"manual/dependencies/#installing-digilent-board-files","text":"Download the board files from github : Open the folder extracted from the archive and navigate to its new/board_files folder. You will be copying all of this folder's subfolders For the 2020.2 version, go to $XILINX_ROOT_DIR/Vivado/2020.2/data/boards/board_files For the 2022.2 version, go to $XILINX_ROOT_DIR/Vivado/2022.2/data/xhub/boards/XilinxBoardStore/boards/Xilinx Copy all of the folders found in vivado-boards new/board_files folder and paste them into this folder","title":"Installing Digilent Board Files"},{"location":"manual/dependencies/#installing-the-2022-patch-amd-xilinx-toolchain-v20202-only","text":"Vivado and Vitis tools that use HLS in the background are also affected by this issue. HLS tools set the ip_version in the format YYMMDDHHMM and this value is accessed as a signed integer (32-bit) that causes an overflow and generates the errors below (or something similar). Follow this link: https://support.xilinx.com/s/article/76960?language=en_US Download the file at the bottom of th page and unzip it in $XILINX_ROOT_DIR run the following commands: shell $ cd $XILINX_ROOT_DIR $ export LD_LIBRARY_PATH=$PWD/Vivado/2020.2/tps/lnx64/python-3.8.3/lib/ $ Vivado/2020.2/tps/lnx64/python-3.8.3/bin/python3 y2k22_patch/patch.py","title":"Installing the 2022 patch (AMD-Xilinx toolchain v2020.2 only)"},{"location":"manual/dependencies/#cloning-the-syfala-repository","text":"To clone and install the latest stable version of the Syfala toolchain, you can use the following commands: $ git clone https://github.com/inria-emeraude/syfala $ cd syfala $ ./syfala.tcl install $ syfala --help In order to use the Syfala toolchain to compile your first example, please report to the main README file located in the repository's root directory.","title":"Cloning the Syfala Repository"},{"location":"manual/dependencies/#troubleshooting","text":"On Archlinux , if you see an error like this one /lib/../lib64/crti.o: file not recognized: File format not recognized you'll have to rename the Vivado/2020.2/tps/lnx64/binutils-2.26 (Vitis will then search in the system libraries).","title":"Troubleshooting"},{"location":"manual/dependencies/#vitisjava-issues","text":"On recent systems (or with Archlinux ), you might have problems compiling the host-side ( ARM ) application. The problem is caused by system libraries requiring newer versions of GCC than the one provided by Vitis. Replacing GCC target in Vitis' path by system GCC works: $ cd $XILINX_ROOT_DIR/Vitis/2020.2/lib/lnx64.o/Default $ mv libstdc++.so.6 libstdc++.so.6.old $ rm -rf libstdc++.so (symlink) $ sudo ln -s /usr/lib/libstdc++.so.6 libstdc++.so.6","title":"Vitis/Java Issues"},{"location":"manual/manual/","text":"Syfala Toolchain Documentation Automatic compilation of Faust audio DSP programs for AMD-Xilinx FPGAs. Supported Board Models [x] Digilent Zybo Z7-10 - Zynq-7000 ARM/FPGA SoC Development Board [x] Digilent Zybo Z7-20 - Zynq-7000 ARM/FPGA SoC Development Board [x] Digilent Genesys ZU-3EG - Zynq UltraScale+ MPSoC Development Board and more to come... Dependencies Please follow the instructions in the file dependencies.md in order to install the AMD-Xilinx toolchain and various other dependencies. Installing the command make install will install a symlink in /usr/bin . After this you'll be able to just run: $ syfala myfaustprogram.dsp You'll also have to edit your shell resource file (~/. bashrc / ~/. zshrc ) and set the following environment variable: export XILINX_ROOT_DIR=/my/path/to/Xilinx/root/directory XILINX_ROOT_DIR is the root directory where all of the AMD-Xilinx tools (Vivado, Vitis, Vitis_HLS) are installed. Getting Started Hardware Setup (Digilent Zybo-Z7-10/20 Boards) [ ] Jumper JP5 should be on JTAG [ ] Power select jumper should be on USB [ ] Switches SW0, SW1, SW2, SW3 should be down [ ] The audio input is LINE IN (blue), not MIC IN [ ] The audio output is the black HPH OUT jack Software Faust Targets Building a simple example for the default board (Digilent Zybo Z7-10) : $ syfala examples/faust/virtualAnalog.dsp This will run the full syfala toolchain on the virtualAnalog.dsp Faust file, which will then be ready to be flashed on the board. Y ou can specify the targeted board using the -b (--board) option: $ syfala examples/faust/virtualAnalog.dsp --board Z20 $ syfala examples/faust/virtualAnalog.dsp --board GENESYS You can now connect the board to your computer with the proper USB/Serial port cable and run the flash command: $ syfala flash The board's RGB LED should then flash green after a few seconds, indicating that your program is running. You can now start the Faust GUI application , which will display a set of sliders/knobs/buttons and update the DSP parameters in real-time through USB-UART : $ syfala start-gui C++ Targets For C++ targets, the process is exactly the same (excepted for the GUI part, which is not available): $ syfala examples/cpp/bypass.cpp --board Z20 $ syfala flash Exporting and Re-Importing Your Builds When you're done playing with your program, you can save and export it as a .zip file with the following command: $ syfala export my-faust-virtual-analog-build # the exported .zip file is tagged with date & time, e.g.: >> \"export/2022-02-17-my-faust-virtual-analog-build.zip\" The resulting .zip file is now available in the repository's export directory, you can re-import it by typing: $ syfala import export/2022-02-17-my-faust-virtual-analog-build.zip Making Another Build Before building another DSP program, please make sure you have saved and exported your previous build beforehand, otherwise it will be overwritten whenever you start a new build. $ syfala examples/my-new-dsp-build.dsp Embedded Linux Please report to the linux-getting-started.md document in order to get you started with the Embedded Linux for Syfala. Going Further Please report to the reference for more information on available commands , options and documentation. The Syfala Team Here is a list of person that have contributed to the Syfala project : Tanguy Risset Yann Orlarey Romain Michon Stephane Letz Florent de Dinechin Alain Darte Yohan Uguen Gero M\u00fcller Adeyemi Gbadamosi Ousmane Touat Luc Forget Antonin Dudermel Maxime Popoff Thomas Delmas Oussama Bouksim Pierre Cochard Joseph Bizien Agathe Herrou Jurek Weber Alo\u00efs Rautureau","title":"Overview"},{"location":"manual/manual/#syfala-toolchain-documentation","text":"Automatic compilation of Faust audio DSP programs for AMD-Xilinx FPGAs.","title":"Syfala Toolchain Documentation"},{"location":"manual/manual/#supported-board-models","text":"[x] Digilent Zybo Z7-10 - Zynq-7000 ARM/FPGA SoC Development Board [x] Digilent Zybo Z7-20 - Zynq-7000 ARM/FPGA SoC Development Board [x] Digilent Genesys ZU-3EG - Zynq UltraScale+ MPSoC Development Board and more to come...","title":"Supported Board Models"},{"location":"manual/manual/#dependencies","text":"Please follow the instructions in the file dependencies.md in order to install the AMD-Xilinx toolchain and various other dependencies.","title":"Dependencies"},{"location":"manual/manual/#installing","text":"the command make install will install a symlink in /usr/bin . After this you'll be able to just run: $ syfala myfaustprogram.dsp You'll also have to edit your shell resource file (~/. bashrc / ~/. zshrc ) and set the following environment variable: export XILINX_ROOT_DIR=/my/path/to/Xilinx/root/directory XILINX_ROOT_DIR is the root directory where all of the AMD-Xilinx tools (Vivado, Vitis, Vitis_HLS) are installed.","title":"Installing"},{"location":"manual/manual/#getting-started","text":"","title":"Getting Started"},{"location":"manual/manual/#hardware-setup-digilent-zybo-z7-1020-boards","text":"[ ] Jumper JP5 should be on JTAG [ ] Power select jumper should be on USB [ ] Switches SW0, SW1, SW2, SW3 should be down [ ] The audio input is LINE IN (blue), not MIC IN [ ] The audio output is the black HPH OUT jack","title":"Hardware Setup (Digilent Zybo-Z7-10/20 Boards)"},{"location":"manual/manual/#software","text":"","title":"Software"},{"location":"manual/manual/#faust-targets","text":"Building a simple example for the default board (Digilent Zybo Z7-10) : $ syfala examples/faust/virtualAnalog.dsp This will run the full syfala toolchain on the virtualAnalog.dsp Faust file, which will then be ready to be flashed on the board. Y ou can specify the targeted board using the -b (--board) option: $ syfala examples/faust/virtualAnalog.dsp --board Z20 $ syfala examples/faust/virtualAnalog.dsp --board GENESYS You can now connect the board to your computer with the proper USB/Serial port cable and run the flash command: $ syfala flash The board's RGB LED should then flash green after a few seconds, indicating that your program is running. You can now start the Faust GUI application , which will display a set of sliders/knobs/buttons and update the DSP parameters in real-time through USB-UART : $ syfala start-gui","title":"Faust Targets"},{"location":"manual/manual/#c-targets","text":"For C++ targets, the process is exactly the same (excepted for the GUI part, which is not available): $ syfala examples/cpp/bypass.cpp --board Z20 $ syfala flash","title":"C++ Targets"},{"location":"manual/manual/#exporting-and-re-importing-your-builds","text":"When you're done playing with your program, you can save and export it as a .zip file with the following command: $ syfala export my-faust-virtual-analog-build # the exported .zip file is tagged with date & time, e.g.: >> \"export/2022-02-17-my-faust-virtual-analog-build.zip\" The resulting .zip file is now available in the repository's export directory, you can re-import it by typing: $ syfala import export/2022-02-17-my-faust-virtual-analog-build.zip","title":"Exporting and Re-Importing Your Builds"},{"location":"manual/manual/#making-another-build","text":"Before building another DSP program, please make sure you have saved and exported your previous build beforehand, otherwise it will be overwritten whenever you start a new build. $ syfala examples/my-new-dsp-build.dsp","title":"Making Another Build"},{"location":"manual/manual/#embedded-linux","text":"Please report to the linux-getting-started.md document in order to get you started with the Embedded Linux for Syfala.","title":"Embedded Linux"},{"location":"manual/manual/#going-further","text":"Please report to the reference for more information on available commands , options and documentation.","title":"Going Further"},{"location":"manual/manual/#the-syfala-team","text":"Here is a list of person that have contributed to the Syfala project : Tanguy Risset Yann Orlarey Romain Michon Stephane Letz Florent de Dinechin Alain Darte Yohan Uguen Gero M\u00fcller Adeyemi Gbadamosi Ousmane Touat Luc Forget Antonin Dudermel Maxime Popoff Thomas Delmas Oussama Bouksim Pierre Cochard Joseph Bizien Agathe Herrou Jurek Weber Alo\u00efs Rautureau","title":"The Syfala Team"},{"location":"manual/reference/","text":"Syfala Reference General Option Flags option accepted values description --xversion 2020.2 - 2022.2 chooses Xilinx toolchain version (2020.2 & 2022.2 only supported for now) --reset / resets current build directory before building ( careful ! all files from previous build will be lost) --mcd power of 2 (defaults to 16) 'One-shot' Commands name description arguments install installs this script as a symlink in /usr/bin/ none clean deletes current build directory none import sets previously exported .zip build as the current build path to the .zip build export exports current build in a .zip file located in the 'export' directory name of the build report displays HLS or global report HLS | any demo fully builds demo based on default example (virtualAnalog.dsp) none flash flashes current build onto target device none gui executes the Faust-generated GUI application none open-project opens the generated .xpr project with Vivado none help prints list of available commands, options and run-time parameters none version displays the current script's version Run Steps Note : the --all is not necessary if you wish to run all steps, just run syfala myfaustdsp.dsp --all runs all toolchain compilation steps (from --arch to --gui ) --arch uses Faust to generate ip/host cpp files for HLS and Host application compilation --hls runs Vitis HLS on generated ip cpp file --project generates Vivado project --synth synthesizes full Vivado project --host compiles Host application, exports sources and .elf output to build/sw_export --gui compiles Faust GUI control application --flash flashes boot files on device at the end of the run --report prints HLS report at the end of the run --export <id> exports build to export/ directory at the end of the run Run Parameters parameter accepted values default value --memory, -m DDR - STATIC DDR --board, -b Z10 - Z20 - GENESYS Z10 --sample-rate 48000 - 96000 - 192000 - 384000 - 768000 48000 --sample-width 16 - 24 - 32 24 --controller-type DEMO - PCB1 - PCB2 - PCB3 - PCB4 PCB1 --ssm-volume FULL - HEADPHONE - DEFAULT DEFAULT --ssm-speed FAST - DEFAULT DEFAULT Parameter Description parameter description --memory, -m selects if external DDR3 is used. Enable if you use some delay, disable if you do not want any memory access (should not be disabled) --board Defines target board. Z10 , Z20 and GENESYS only. If you have a VGA port (rather than 2 HDMI ports), you have an old Zybo version, which is not supported. --sample-rate Changes sample rate value (Hz). Only 48kHz and 96kHz is available for SSM embeded codec. 192000 ( ADAU1777 and ADAU1787 only) 384000 ( ADAU1787 only) 768000 ( ADAU1787 only and with --sample--width 16 only) --sample-width Defines sample bit depth (16|24|32) --controller-type Defines the controller used to drive the controls when SW3 is UP . ( SW3 DOWN for software control), SEE BELOW for details on each value --ssm-volume Chooses audio codec to use. For now, it only changes the scale factor. FULL : Maximum ( WARNING : for speaker only, do not use with headphones). HEADPHONE : Lower volume for headphone use. DEFAULT : Default value +1dB because the true 0dB ( 0b001111001 ) decreases the signal a little bit. --ssm-speed Changes SSM ADC/DAC sample rate. DEFAULT : 48kHz sample rate. FAST : 96Khz sample rate Hardware Configuration (Zybo Z7-10/20) Syfala Hardware Controller Board (SW3 UP) If you use a Hardware Controller Board, please set the --controller-type command-line parameter to the proper value (see below) Controller-Type Values Description DEMO : Popophone demo box PCB1 : Emeraude PCB config 1: 4 knobs, 2 switches, 2 sliders (default) PCB2 : Emeraude PCB config 2: 8 knobs PCB3 : Emeraude PCB config 3: 4 knobs, 4 switches PCB4 : Emeraude PCB config 4: 4 knobs above, 4 switches below You can swap from hardware to software controller during DSP execution by changing SW3 . Switch Description Default configuration in bold SW3 SW2 SW1 SW0 +-----+-----+-------+------+ | Hard| ADAU| BYPASS| MUTE | | | | | | | | | | | | GUI | SSM | USE DSP | UNMUTE | +-----+-----+-------+------+ SW3 : Controller type select: hardware (Controller board) or software (GUI). SW2 : Audio codec input select (ADAU=external or SSM=onboard). Does not affect output. SW1 : Bypass audio dsp. SW0 : Mute. Status LEDs The RGB led indicate the program state: BLUE : waiting GREEN : all good! ORANGE : warning (bypass or mute enabled) RED : ERROR! (configuration failed or incompatible), could happen if you select the SSM codec with incompatible sample rate. The 4 LEDs above the switches indicate the switches state. If one of them blink, it indicates the source of the warning/error. SD Card Files You can put the program on an SD card (if you want something reproducible and easily launchable, for the demos...). After a make command, you should see a BOOT.bin file in SW_export (or you can build it with make boot_file ). Put the file on the root of SD card. And don't forget to put JP5 on 'SD' position !","title":"Reference"},{"location":"manual/reference/#syfala-reference","text":"","title":"Syfala Reference"},{"location":"manual/reference/#general-option-flags","text":"option accepted values description --xversion 2020.2 - 2022.2 chooses Xilinx toolchain version (2020.2 & 2022.2 only supported for now) --reset / resets current build directory before building ( careful ! all files from previous build will be lost) --mcd power of 2 (defaults to 16)","title":"General Option Flags"},{"location":"manual/reference/#one-shot-commands","text":"name description arguments install installs this script as a symlink in /usr/bin/ none clean deletes current build directory none import sets previously exported .zip build as the current build path to the .zip build export exports current build in a .zip file located in the 'export' directory name of the build report displays HLS or global report HLS | any demo fully builds demo based on default example (virtualAnalog.dsp) none flash flashes current build onto target device none gui executes the Faust-generated GUI application none open-project opens the generated .xpr project with Vivado none help prints list of available commands, options and run-time parameters none version displays the current script's version","title":"'One-shot' Commands"},{"location":"manual/reference/#run-steps","text":"Note : the --all is not necessary if you wish to run all steps, just run syfala myfaustdsp.dsp --all runs all toolchain compilation steps (from --arch to --gui ) --arch uses Faust to generate ip/host cpp files for HLS and Host application compilation --hls runs Vitis HLS on generated ip cpp file --project generates Vivado project --synth synthesizes full Vivado project --host compiles Host application, exports sources and .elf output to build/sw_export --gui compiles Faust GUI control application --flash flashes boot files on device at the end of the run --report prints HLS report at the end of the run --export <id> exports build to export/ directory at the end of the run","title":"Run Steps"},{"location":"manual/reference/#run-parameters","text":"parameter accepted values default value --memory, -m DDR - STATIC DDR --board, -b Z10 - Z20 - GENESYS Z10 --sample-rate 48000 - 96000 - 192000 - 384000 - 768000 48000 --sample-width 16 - 24 - 32 24 --controller-type DEMO - PCB1 - PCB2 - PCB3 - PCB4 PCB1 --ssm-volume FULL - HEADPHONE - DEFAULT DEFAULT --ssm-speed FAST - DEFAULT DEFAULT","title":"Run Parameters"},{"location":"manual/reference/#parameter-description","text":"parameter description --memory, -m selects if external DDR3 is used. Enable if you use some delay, disable if you do not want any memory access (should not be disabled) --board Defines target board. Z10 , Z20 and GENESYS only. If you have a VGA port (rather than 2 HDMI ports), you have an old Zybo version, which is not supported. --sample-rate Changes sample rate value (Hz). Only 48kHz and 96kHz is available for SSM embeded codec. 192000 ( ADAU1777 and ADAU1787 only) 384000 ( ADAU1787 only) 768000 ( ADAU1787 only and with --sample--width 16 only) --sample-width Defines sample bit depth (16|24|32) --controller-type Defines the controller used to drive the controls when SW3 is UP . ( SW3 DOWN for software control), SEE BELOW for details on each value --ssm-volume Chooses audio codec to use. For now, it only changes the scale factor. FULL : Maximum ( WARNING : for speaker only, do not use with headphones). HEADPHONE : Lower volume for headphone use. DEFAULT : Default value +1dB because the true 0dB ( 0b001111001 ) decreases the signal a little bit. --ssm-speed Changes SSM ADC/DAC sample rate. DEFAULT : 48kHz sample rate. FAST : 96Khz sample rate","title":"Parameter Description"},{"location":"manual/reference/#hardware-configuration-zybo-z7-1020","text":"","title":"Hardware Configuration (Zybo Z7-10/20)"},{"location":"manual/reference/#syfala-hardware-controller-board-sw3-up","text":"If you use a Hardware Controller Board, please set the --controller-type command-line parameter to the proper value (see below)","title":"Syfala Hardware Controller Board (SW3 UP)"},{"location":"manual/reference/#controller-type-values-description","text":"DEMO : Popophone demo box PCB1 : Emeraude PCB config 1: 4 knobs, 2 switches, 2 sliders (default) PCB2 : Emeraude PCB config 2: 8 knobs PCB3 : Emeraude PCB config 3: 4 knobs, 4 switches PCB4 : Emeraude PCB config 4: 4 knobs above, 4 switches below You can swap from hardware to software controller during DSP execution by changing SW3 .","title":"Controller-Type Values Description"},{"location":"manual/reference/#switch-description","text":"Default configuration in bold SW3 SW2 SW1 SW0 +-----+-----+-------+------+ | Hard| ADAU| BYPASS| MUTE | | | | | | | | | | | | GUI | SSM | USE DSP | UNMUTE | +-----+-----+-------+------+ SW3 : Controller type select: hardware (Controller board) or software (GUI). SW2 : Audio codec input select (ADAU=external or SSM=onboard). Does not affect output. SW1 : Bypass audio dsp. SW0 : Mute.","title":"Switch Description"},{"location":"manual/reference/#status-leds","text":"The RGB led indicate the program state: BLUE : waiting GREEN : all good! ORANGE : warning (bypass or mute enabled) RED : ERROR! (configuration failed or incompatible), could happen if you select the SSM codec with incompatible sample rate. The 4 LEDs above the switches indicate the switches state. If one of them blink, it indicates the source of the warning/error.","title":"Status LEDs"},{"location":"manual/reference/#sd-card-files","text":"You can put the program on an SD card (if you want something reproducible and easily launchable, for the demos...). After a make command, you should see a BOOT.bin file in SW_export (or you can build it with make boot_file ). Put the file on the root of SD card. And don't forget to put JP5 on 'SD' position !","title":"SD Card Files"}]}