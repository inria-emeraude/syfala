#include <syfala/utilities.hpp>
#include <cmath>

/**
 * /!\ These macros are always required when writing a
 * Syfala C++ program: it will inform the toolchain to use:
 * - audio_in_# (here audio_in_0 and audio_in_1)
 * - audio_out_# (here audio_out_0 and audio_out_1)
 * as audio input and output ports.
 */
#define INPUTS 49
#define OUTPUTS 49

#define NFC1_NMAX 3
#define NFC2_NMAX 5
#define NFC3_NMAX 7
#define NFC4_NMAX 9
#define NFC5_NMAX 11
#define NFC6_NMAX 13

static int nbands = 2; // bands
static int decoder_type = 2; // decoder type

static float xover_freq = 400; // crossover frequency in Hz (typically 200-800)
static float lfhf_ratio = 1; // lfhf_balance (typically -+3db but here linear)
static float output_gain = 1; // in dB in original code

static int decoder_order = 6;
static int co[INPUTS] = {0, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}; // ambisonic order of each input component
static int input_full_set = 0; // use full or reduced input set
static int delay_comp = 1; // delay compensation
static int level_comp = 1; // level compensation
static int nfc_output = 0; // nfc on input or output
static int nfc_input  = 1; // nfc on input or output
static int output_gain_muting = 1; // enable output gain and muting controls
static int ns = OUTPUTS; // number of speakers
static int rs[OUTPUTS] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}; // radius for each speaker in meters
static float gammas[2][7] = {{1.0f,1.0f,1.0f,1.0f,1.0f,1.0f,1.0f},{1.781118096,   1.690473278,   1.516103297,    1.27126054,  0.9744085427,  0.6476655117,  0.3149510608}}; // per order gains, 0 for LF, 1 for HF. Used to implement shelf filters, or to modify velocity matrix for max_rE decoding, and so forth.  See Appendix A of BLaH6.
static float s[49][49] = {{0.018956285,  0.0004242987,  0.0579284812, -0.0005011072,  0.0013730484, -0.0040257331,  0.0942844247,  0.0016894743,  0.0003983847, -0.0038841685,   8.20699e-05,   2.14953e-05,  0.1312585912, -0.0070763582,  0.0005983426, -0.0027066138,  0.0038177387, -0.0065249328,  0.0120613032,  0.0041680223,  0.1723473902,   0.007200096, -0.0153138518,  0.0050022093,  0.0108160626, -0.0044710655,  0.0045112162, -0.0055055717,  0.0282734162,  0.0268128475,  0.1995399352,  0.0329472635, -0.0056625265, -0.0032147895,  0.0076901563,  0.0025124509,  0.1928973236, -0.1142996214,   0.056214786, -0.0814884744,  0.0107254974, -0.0929758744,  0.3256848925, -0.0500175963, -0.0749848473, -0.1060121901,  0.2130521368, -0.0002905067, -0.0147138448},
    {0.0189562886, -0.0006284291,  0.0383464214,  0.0434200239,  0.0015569033,  0.0030021604,   0.012129784,  0.0802036059,  0.0481608464, -0.0054358349, -0.0033682455,    -0.0030229, -0.0361884833,  0.0675846483,  0.0977431215,  0.0426684394,  0.0035999617, -0.0007740873,  0.0076880322, -0.0115320616, -0.0637978605,  0.0170952604,  0.1073720488,  0.1090336636,  0.0486502093,  0.0028599856,  0.0023029747,  0.0198728341,  0.0156673445,  -0.006343945, -0.0646718603, -0.0448337519,  0.0836570236,  0.1346887523,  0.0984968658,  0.0295121097,  0.2107596865, -0.1278815451,  0.0004573292, -0.0267436614, -0.0579945965, -0.1350596535,    0.09522571, -0.0822665158, -0.0593251191,   0.060042929,  0.3505918182,  0.1037476641, -0.0119889553},
    {0.0208250676,  0.0060892981, -0.0191403158, -0.0589801164,  -0.016637982,  -0.001593378, -0.0382761327,  0.0519343242,  0.0851195682,  0.0363081576,   0.013639939, -0.0082713526,   0.053413083,  0.0449647433, -0.0777289645, -0.0964379028, -0.0549089806, -0.0288958782,  0.0098450696,  0.0094534555,  0.0181912958, -0.1024002942, -0.0319400395,  0.1045406398,  0.1074742056,  0.0610022263,  0.0369516882, -0.0118234802,  -0.026516147,  0.0137973983,  -0.087844962,  0.0189211165,  0.1050572759,  0.0119722282, -0.1186218774, -0.1169575128, -0.1715796239, -0.1007778466, -0.0228668069,  0.1211656235, -0.0400318028, -0.0692057484,   0.052831964,  0.1049958902, -0.1052010527, -0.0482030659,  0.0491856021,  0.0626059182,  0.0327909239},
    {0.0203193792,  0.0524797431,   0.004268726, -0.0291562551, -0.0752508986,  0.0152039506, -0.0525022064, -0.0085193594, -0.0440201597, -0.0042818295, -0.0172716267, -0.0779765949, -0.0146783499,  0.0456969243, -0.0090646882,  0.1143667639,  0.1263247389,  0.0046820127,  0.0921417126, -0.0244686127,  0.0775158021,  0.0161594768,  0.0576224649,  0.0296856938, -0.0635876261, -0.1411256052,  0.0196453376,  0.0125031119,  0.0376746119,   0.108385657,  0.0310802385, -0.0399206831,  0.0062959463, -0.1308569601, -0.0275961955, -0.0999452351, -0.0402945843, -0.0379141103, -0.1278045317,  0.0357798791, -0.1065150352,  0.0394449729, -0.0660035895,  0.0194428065, -0.1280476177,  0.0056684416,  0.0747213187,   0.019488706,  0.0858002845},
    {0.0199680787, -0.0424308548, -0.0279783281, -0.0305807701,  0.0667927467,  0.0580228019, -0.0168281191,  0.0369888176, -0.0154679208, -0.0285192396, -0.0880449522, -0.0066930517,  0.0557661522,  0.0059232216,  0.0326566506,  0.0723453812, -0.0472402303,  0.0433189432,  0.0306480307, -0.0614485909,  -0.036638851, -0.0460536646, -0.0101723133, -0.1091245869, -0.0697896908,  0.0724718206,  0.0632700762, -0.0202006491,  0.0616309035,  0.0848085522, -0.0384147442,  0.0489965795, -0.0115014539,  0.0768485761,  0.1231991129,  0.0040097147, -0.2328566591, -0.1857001494, -0.0796237986,  0.0741887688, -0.1288365352, -0.0692637992,  0.0441258115,  0.0279638741,  0.0573363289,   0.088220878, -0.1005113489, -0.0464323421,  0.0022892015},
    {0.0199735875, -0.0534534778, -0.0009014173, -0.0284015199,  0.0691529481, -0.0004148483, -0.0511056769,  0.0049494237, -0.0497727597,  0.0112176967, -0.0074379703,  0.0760399954,  0.0085741935,  0.0346991419, -0.0006508892,  0.1025294408, -0.1135807582,  0.0008496453, -0.0750975705, -0.0124553819,  0.0675172193, -0.0073988957,  0.0504633942, -0.0104812026, -0.0469950457,  0.1212239397,  0.0228038091, -0.0228544195,  0.0233392263, -0.1094490501, -0.0085011474, -0.0518421537, -0.0167288386, -0.1179695627,  0.0074703167, -0.1019548578,   0.226186657, -0.0007835338,  0.1588701221, -0.0864528517,  0.1291142638,  0.0302655241, -0.0355567587, -0.0232527171,  -0.043259591, -0.0675215628,  0.1138043238, -0.0169960841,  0.1232690511},
    {0.0208180838,  0.0557168316,  0.0253993187, -0.0067270897,  -0.011496658,   0.064290083, -0.0260234384, -0.0027247216,  -0.073260273, -0.0826533425,  -0.016095181, -0.0112740085, -0.0628079109,  0.0031824735, -0.0978045794,  0.0279124741,  0.0297072262, -0.1258488613, -0.0131729888, -0.1006462593, -0.0266969462,  0.0050245456, -0.0201555902,  0.0263031124,  0.0844459288,  0.0814414639,  0.0545008019, -0.0645169009,  0.0003255853, -0.0883695153,  0.0592122551, -0.0036708059,  0.0995301574,  0.0356793377,  0.1403183375, -0.0396976443, -0.2295329774,   0.149028979,  0.0590820866,   5.35854e-05,  0.0856778962,  0.0822411339,  0.0100986378,  0.0058223765,  0.1310908812,   0.015395117, -0.0349241941, -0.1001284966, -0.0295018986},
    {0.0194508986,  0.0460588551, -0.0153087438,  0.0310384968,  0.0733671023, -0.0396199687,   -0.03744445, -0.0184428329, -0.0273805841,  0.0258519707, -0.0519405977, -0.0441044324,  0.0453689208, -0.0335183632,  0.0250319139, -0.0895898147,   -0.07209806, -0.0153154572, -0.0440252576,  0.0683124171,  0.0224611781,   0.040746898,  0.0034309935,  0.0724424451, -0.0826715344, -0.1280318729,  0.0852865981, -0.0216637718,  0.1070084276,  0.0199074716, -0.0851664325,   0.002877271, -0.0418578757,  0.0450469373,  0.0525663744,  0.0049138965, -0.1529221216,  0.1326781355,  0.0885256785, -0.0961322457,    0.04931824, -0.1518458329,  0.0506386287, -0.1141354982,  0.0406801109, -0.1505007941, -0.0061403287,  -0.085106059,  0.1074528551},
    {0.02028245, -0.0051793316,  0.0109161944, -0.0594333626,  0.0121978655, -0.0063740623, -0.0432761567, -0.0344737448,   0.082904666, -0.0311118111,  0.0178948931,  0.0041771881,  -0.039811421,  0.0713892969,  0.0518585788, -0.1075584255,  0.0516801721, -0.0235338946, -0.0078261789,  0.0109295237,  0.0340984993,  0.0774634283, -0.0699259305, -0.0706148999,   0.118049603,  -0.057040958,  0.0489916881,  0.0181238817,  -0.020173822, -0.0162961079,  0.0642195028, -0.0656063317, -0.0850356261,  0.0744907003,  0.0879964041, -0.1245922304,  0.1916688436, -0.0461437664,  0.0235525046,  0.0323527369, -0.0080391025, -0.0235827086, -0.0464290688, -0.1035562672,  0.1192939115,  0.0453728658, -0.1114691727, -0.0476528468,  0.0931487828},
    {0.0203870291, -0.0250938322, -0.0149071109, -0.0543587574,  0.0649943382,  0.0140759998, -0.0430368052,  0.0425196206,  0.0465097686, -0.0996235985,  -0.052478045,  0.0317779144,  0.0543875082,  0.0486163501, -0.0423304993, -0.0174794377,  0.1137920733,  0.0773321065, -0.0461224347,  -0.039157143,  0.0339764963, -0.0821074371, -0.0353514599,  0.0243358448, -0.0311681731, -0.0937835577, -0.0905186459,  0.0484776672,   0.084074422, -0.0112194953, -0.0584425805, -0.0094701657,  0.0695797315,  0.0024212182,  0.0129521505,  0.0913195234,  0.1404567685,  0.1247199772,  -0.009631171, -0.2421757051,   0.075905266,  0.0919293231,  0.0076354631,  0.0598494182,  0.0181068896, -0.0521342736,  0.0763607842, -0.0343188009, -0.0479421549},
    {0.0209195046,  0.0161148345,  0.0541751259,   0.024540005,  0.0190227259,    0.04199491,  0.0695413763,  0.0639507151,  0.0082382126,  0.0165479081,   0.052363547,  0.0681414641,  0.0566132083,  0.1059117588,  0.0196828856,   0.001629839, -0.0004613548,  0.0358314947,  0.0763433307,  0.0844779837,  0.0134263942,  0.1111409894,  0.0486029302, -0.0168302594, -0.0181636795, -0.0047036474,  0.0024213174,   0.049990713,   0.093695193,  0.0587293932, -0.0226776097,  0.0734605728,  0.0493339102, -0.0098257943, -0.0151336099, -0.0020650901, -0.2190361836,  0.0823136691, -0.0039958086,  0.1255728682,  0.1430732528,  0.1951108987, -0.1919979995,  0.0877565064,   0.105497279,  0.0592028214, -0.2378970847, -0.0405374615,   0.004843901},
    {0.020561224, -0.0140152146, -0.0440704837, -0.0411136147,  0.0232464992,   0.031639133,  0.0280652661,  0.0832018406,  0.0380173229, -0.0331018319, -0.0580101082, -0.0355793096,  0.0207136289, -0.0891689715, -0.0840898348,  -0.029964401,  0.0380417083,  0.0844544272,  0.0846859427,  0.0126701054, -0.0844609823,  0.0325924082,  0.1058394984,  0.0543889213,  0.0181746143,   -0.02324669, -0.0890601908, -0.1258781796, -0.0650262296,  0.0043179035,  0.0711493419,  0.0529430405,  -0.074545828, -0.0813176831, -0.0264105495,  -0.003902639,  0.1157915646,  0.0749781274,  0.1217658924,  0.2030031101,  -0.043063918, -0.0391898973, -0.0119579949, -0.0998807711,  -0.048385935,    0.02520593, -0.0373788832,  0.0277912808,  0.0024960924},
    {0.0213048115,  0.0303435884,  0.0282793181,  0.0483021429,  0.0675557967,  0.0339865055, -0.0222219487,  0.0644284972,  0.0334498991,  0.0875802555,  0.0944808657,  0.0029350014, -0.0658023365, -0.0006980698,  0.0469172162, -0.0077789456,  0.0715337894,  0.1272576581,  0.0351182666, -0.0445139766, -0.0407755381, -0.0831679756,  0.0075591768, -0.0183330364, -0.0547701462,  0.0292372535,  0.1250087955,  0.0643119232, -0.0671062527, -0.0444779544,  0.0250461238, -0.0828344928, -0.0473618483, -0.0135385792, -0.0929500226, -0.0829007113, -0.1374263202,  0.1005224635,  0.0939707708, -0.0513147466, -0.0397321072,  0.0131881194,  0.0541695699, -0.0204975403, -0.0478759259, -0.0377032555, -0.1266391253, -0.1595797978, -0.0267754549},
    {0.0203193851, -0.0476107875,  0.0303058997,  -0.020909274,  0.0447070573, -0.0719747131, -0.0110492215,  -0.031427455, -0.0487015801,  0.0264943028,  0.0806747273, -0.0163810508, -0.0651522565, -0.0078660192,  -0.071707347,  0.0702511993, -0.0793312569,  0.0404621087,  0.0470304075,  0.0815311931, -0.0616504314,  0.0369759297, -0.0366132771,  0.1275833765, -0.0027536227,  0.0470182475, -0.1396671978,  0.0353069091, -0.0505631893,   0.122522028,  0.0282228169,  0.0625801355,  0.0568748222,  0.1049422169, -0.0188007781, -0.0652114525,  0.0932744383,  0.1106524986, -0.0946960885, -0.0503228739, -0.1049597816,  0.0004820823,  0.0590038076,  0.0027971096,   0.107451263, -0.0034509856, -0.0703003442, -0.0332417118,  0.0592429124},
    {0.0210385915, -0.0320272649,   0.000164612,  0.0561237279, -0.0755180292,  0.0036141255, -0.0568207666, -0.0025966192,  0.0488767372, -0.1176803727,  0.0001077471,  0.0438962259,  0.0018298441, -0.0805294103,  0.0045271543,  -5.67797e-05, -0.1215914042,   0.004986111,  0.0963873338,   -0.00925925,  0.0755862946,  0.0127397261,   -0.05377989,  0.0090045861, -0.0614598428, -0.0926101533,    0.00394355,  0.1328929915, -0.0034583595, -0.0641420323, -0.0126680872,  0.1093287216,  0.0050987731,   0.016818985,  0.0141263027, -0.1357954614,  0.0468610077, -0.1478240326,  0.0822028417,  0.0137354831, -0.0996056689, -0.1131742231, -0.0291304883,  0.0228071007,  0.0296147238, -0.0022814538,  0.2242597178, -0.0446902728, -0.1274552347},
    {0.0203870245, -0.0399094454, -0.0433797273,  0.0182270801, -0.0265705375,  0.0809672736,  0.0266683883, -0.0408001265, -0.0246595443,  0.0074212067,  0.0697227335, -0.0910175692,  0.0215208774,  0.0487901004,  0.0626360889, -0.0337657469,  0.0258982725, -0.0199676587,  -0.102212341,  0.0313932643, -0.0769346742, -0.0188561651, -0.0792886315,   0.090713402, -0.0025352089,  0.0087324488, -0.0646527425,  0.0370670005,  0.0865833748,  0.0522354908,  0.0773155964, -0.0242841388,  0.0694369679, -0.1238443518,  0.0265362178,  0.0103427576, -0.0724763837, -0.1241211577,  0.1005320599, -0.0169030008, -0.0370372202, -0.2251219984, -0.0255774851,  0.0871146119,  0.0516765946,  0.1107518595,  0.0810913303, -0.1064987509,  0.0055450791},
    {0.0203527549, -0.0370155855,  0.0131401181, -0.0459875632,  0.0830969721, -0.0158719196, -0.0427008031, -0.0317994261,  0.0235892017, -0.0925103837,  0.0517519434,  0.0362580554, -0.0454706953,  0.0522944536,  0.0160083089,  0.0444283315,  0.0535407547, -0.0641701246, -0.0660191105,  0.0437503308,  0.0359546169,  0.0584776906, -0.0102222597,  0.0228055372, -0.1047556435,   0.003231495,  0.0274051825,  0.0613035659, -0.0953839709, -0.0196270685,  0.0505479051,  -0.037242553, -0.0297404034, -0.0233590229, -0.0777860404,  0.1301419348, -0.3011577314, -0.0131105602, -0.0893450737,  0.2240813036, -0.0417083078,  -0.048840522, -0.0318238968, -0.0176038276, -0.0593631528,  0.0464751318, -0.0370699398,  0.0727962037,  -0.103739285},
    {0.0208250672, -0.0565426134, -0.0260418466, -0.0026152126,  0.0028643998,  0.0699585649,   -0.02380256,  0.0045144485, -0.0787247582,  0.0915977847, -0.0117800018,  0.0124867726,  0.0629352069, -0.0032891009,  0.0948762899,  0.0114711166, -0.0165550463, -0.1253713769,  0.0042261988, -0.0999612819,  -0.030213576, -0.0056038309, -0.0131644701,  -0.018427046,  0.1043711884, -0.0956069737,  0.0255722983,  0.0512777061, -0.0016437996,  0.0771002668, -0.0497990297,  0.0159201982, -0.0826103109,  0.0073339729, -0.1575980947, -0.0174756046,  0.1245772249,  0.2059758857, -0.0491633465,  0.0714611533,  -0.048079621,  0.0719160108,  0.0460967381, -0.0113483622,  0.0231239421,  0.0271813965, -0.0072574422,  0.1304446369, -0.0475702994},
    {0.0203527541, -0.0274899253, -0.0306057204,  0.0443313146, -0.0660321955,  0.0405830872, -0.0081031428,  -0.062250933,  0.0244940046, -0.0690336563,  0.0944279552, -0.0090867861,  0.0573958769,  0.0142578372, -0.0468815719, -0.0110999253,  -0.052444695,  0.1164239682, -0.0528492837, -0.0357884136, -0.0517835407,  0.0536424655,  0.0253497818,    0.01512933, -0.0525194254, -0.0075441733,   0.086914102,  -0.090415549, -0.0543896065,  0.0630381609, -0.0060585414, -0.0857516069,  0.0284072157, -0.0319550955,  0.0795170804, -0.0640592652,  0.0280185755,    0.19386694, -0.1195100907,  0.0024536377,  0.0575519834,  0.1281445086,  0.0188023144, -0.0141133184, -0.0460245022,  0.0434314326, -0.2363501518,  0.2111669377, -0.0151120089},
    {0.0207014576,  0.0407348304,  0.0338677752,   -0.03442997, -0.0671239168,  0.0587045381, -0.0030600895, -0.0552238105, -0.0089874248,  0.0402110515, -0.1070779713,  0.0259584164, -0.0624025744, -0.0296858368, -0.0099004712,  0.0537857161,  0.0175562095,  0.0756381007,  -0.075489918, -0.0462643882, -0.0783610157,  0.0409927778, -0.0087310577,  0.1053538354, -0.0656227772, -0.0505978783,  0.0356292001,    0.06604794,  0.0301425815, -0.0979983917, -0.0144272601,  0.0740697449,  0.0097134292,  0.0944589533, -0.1258067193,  0.0373661841,  0.2383731309, -0.1480133689,  0.0671123938,  0.0180453089,  0.0630751743, -0.1121115728,  0.1036817069, -0.0237658467,  0.0647002703,  -0.057154866,  -0.052555434,  0.0428210346,   0.011370345},
    {0.0199735878, -0.0048196828,  -0.045951365,  0.0391149366, -0.0037216625,  0.0113788886,  0.0349193967, -0.0855609381,  0.0348217209, -0.0096157729,  0.0151752556, -0.0170652013,  0.0055819667,  0.1033957527, -0.0756936007,  0.0262328732, -0.0096440849,  0.0252664093, -0.0308674243,  0.0110295188, -0.0537590586, -0.0742497906,   0.117800362, -0.0602893063,  0.0212999305,  -0.013431894,  0.0315256552, -0.0424586101,  0.0338555248, -0.0080744014,  0.1013765981,  0.0067658452, -0.1485723061,    0.13061283, -0.0427244773,  0.0140742595,  0.0416039416, -0.1163105562,  0.0010480119,  0.0096740372,  0.0115332072,   -0.11082308, -0.0621411256,  0.1232108749,  0.0766685617, -0.1330362055,  0.2359886896, -0.1089438943, -0.0136381617},
    {0.0210522221,  0.0275090891, -0.0368130477,  0.0437250957,  0.0482879421, -0.0442520485,  0.0023936291, -0.0741034488,  0.0284399778,  0.0634444137, -0.0953730488,  0.0331634771,  0.0542155845,  0.0457711478, -0.0539309979, -0.0011973146,  0.0520249765, -0.1264150823,  0.0898962601,  0.0204815858,  -0.080657662,  0.0329034426,  0.0482796619,  0.0046562943, -0.0332312168,  0.0355756975, -0.1264949115,  0.1376475393, -0.0203323804, -0.0642564864,  0.0356373157, -0.0996268344,  0.0060812158, -0.0227865453,  0.0758780471, -0.0493319273,  0.0042005877,  0.0463025957,  0.0294931585,  0.0616095877, -0.0999813851,   0.137837945,  0.0041719583,  0.0535485865, -0.0738280621,  0.0605900047, -0.1978489689,  0.1481688652, -0.0287818945},
    {0.0203527592,  0.0516049576, -0.0259035803, -0.0179889849, -0.0370533709, -0.0688387695, -0.0222685255,  0.0268520598, -0.0567396666, -0.0446042512,  0.0542145787, -0.0047572368,  0.0671238334, -0.0014083589,  0.0743598486,  0.0677874136,  0.0746932455,   0.062057712, -0.0234904186,  0.0876053988, -0.0323578118, -0.0293309127, -0.0210719926, -0.0958039253,  0.0195244619, -0.0086235755, -0.1177313148, -0.0408565604, -0.0447564261, -0.0753692045,  -0.037766322,  0.0143171668, -0.0500132803,  0.0632778138,   -0.04685283, -0.0935029496, -0.2722091391,  0.0585351862,  0.0644035407, -0.1759414299,  0.1294849027,  0.0127154416,  0.0308196471, -0.0310258754,  0.1864260668,    0.05317015, -0.0395553365,   0.064978975,  0.0528653938},
    {0.0199680725,  0.0160694806, -0.0414394189, -0.0392796901,  -0.027770643, -0.0369658648,  0.0216269678,   0.080405987,  0.0254556958,   0.032349908,  0.0662346437,   0.036708208,  0.0358865877, -0.0784563317, -0.0612906515,  -0.008629752, -0.0298594306,    -0.0846874, -0.0865957916,  -0.007368816, -0.0720965242,  0.0289186732,   0.081745596,  0.0266121922, -0.0112937119,  0.0125495948,  0.0847977827,   0.125211089,   0.072522958, -0.0181648235,  0.0958930583,  0.0450693465, -0.0594522578, -0.0468223234, -0.0041779135,  0.0132659862, -0.0941294325,  0.0076067178, -0.1085848177, -0.2737278426,  0.0697899088,  0.1268288929, -0.0598387432, -0.1118831188,   0.109638285,  0.0497534563, -0.0251770335, -0.0047911745,  0.0129484645},
    {0.0213048061, -0.0217830371,   0.054959231,  0.0236332488, -0.0267250592, -0.0541212319,  0.0683047966,   0.056327116, -0.0009884435, -0.0095639192, -0.0612442212, -0.0871624734,  0.0487764398,  0.0961146434,  0.0045518951, -0.0109638409, -0.0006648864, -0.0286789619, -0.1109691151, -0.1024128369, -0.0027758966,  0.1096095501,  0.0162290564, -0.0224534282, -0.0091655777,  0.0152417152,  0.0058301618, -0.0543411059, -0.1620369421, -0.0878490813, -0.0535531786,  0.0975051781,  0.0217793184, -0.0379927247, -0.0316952862, -0.0060756329, -0.0186283666,  0.1103115094, -0.0333127474, -0.0678268809,  -0.154038968, -0.0450024112, -0.1370161982,  0.0583256001,  0.0732656616,  0.0046913201, -0.1362608579,  0.0134277247,   0.034693152},
    {0.0194509028, -0.0476479047,  0.0132360474,  0.0295575743, -0.0745015197, -0.0307841253, -0.0349415379,  0.0182947685, -0.0372912545, -0.0109804403, -0.0520332952,  0.0410220608, -0.0424925606, -0.0253022311, -0.0293811896, -0.0965721989,  0.0909295675, -0.0062344525,  0.0416866254,  0.0603241522,  0.0162298762, -0.0429578673,   0.026100699,  -0.072190099, -0.0679066039,  0.1426190749,  0.0858525662,  0.0145900671,  0.0728671005, -0.0137081966,  0.0659645918,  0.0179027546,  0.0634065148,  0.0409568106, -0.0661450067,  0.0405768638,  0.1285281143,   0.224192418, -0.0579424786, -0.0186282397, -0.0757838065,  -0.076130786, -0.0374473196,  0.0549435772,  0.0294410996,  0.1301211029,  -0.043777416,  0.1440665711,  0.1239496426},
    {0.0189562922,  0.0400938685,  0.0378266981,  0.0178259805,  0.0305597753,  0.0749562699,  0.0160141556,  0.0306931038, -0.0340558468, -0.0185524287,  0.0703935678,   0.061950487, -0.0400261532,  0.0245902337, -0.0627581467, -0.0449331282, -0.0332988872, -0.0257944889,  0.0967766887,  -0.001426817, -0.0781123891,  0.0029524606, -0.0776714002, -0.0836851561,  0.0079812546, -0.0044177542, -0.0793512243, -0.0171873213,  0.0794145687, -0.0657768773, -0.0711311011, -0.0286613753, -0.0401683599, -0.1289838008, -0.0152400764,  0.0314700781,  0.2787159454, -0.1172298983, -0.0627202417, -0.0449228187, -0.0687283671, -0.2512710652,  0.1164724976, -0.1093427493, -0.0037450549, -0.1581803804,  0.1276226292,  0.0881244126,  0.0051623111},
    {0.0210385933,  0.0642293729, -0.0052178829,  0.0047967682,  0.0076918131, -0.0145582866, -0.0500150129, -0.0046099477, -0.0924469826, -0.1158317969, -0.0039227454, -0.0847651703,  0.0151727896, -0.0067238305,   0.025822321, -0.0269192697, -0.0313979695,  0.0381544789, -0.0011796036,  0.0371328183,   0.060350058,  0.0042132389,  0.0954683828,  0.0106343283,  0.1417844284,  0.1656086489,  0.0135663246,  0.1191273402,  0.0151903643,  0.0951857677, -0.0466425148,  0.0055103309, -0.0546366528,  0.0015081649, -0.0407301603,  0.0591252598,  0.2685363067, -0.0687291296,  0.0163751428,  0.0383430463, -0.0592636277, -0.0959776709,  0.0053139696, -0.0260145278, -0.1218688891, -0.0659960319,  -0.038484936,  0.0141876781, -0.1077826958},
    {0.0203682268,  0.0513368339,  0.0139252677,  0.0287553795,  0.0714816025,  0.0373477817, -0.0445285503,   0.017537782, -0.0412703732, -0.0035200157,  0.0450648679, -0.0544293286, -0.0414206313, -0.0288231037, -0.0339177416, -0.0990189856, -0.1070130794,  -0.010851588, -0.0655662024, -0.0728015157,  0.0423501871, -0.0364295931,  0.0421178462, -0.0756882849, -0.0603091758, -0.1130948951, -0.1052204164, -0.0078107237, -0.1061179386,  0.0275863452,  0.0937822948,  0.0269993672,  0.0667656673,  0.0607460147, -0.0287298081,   0.064960432, -0.0769083958,  -0.041974182, -0.0404940006,  0.0519465528,  0.0161744691,  0.2052045706, -0.0844767948,  0.1136503935,  0.0016404783,  0.1834033289,  -0.013817069,  0.0861444819,  0.0613785812},
    {0.0210385988, -0.0211234125,  0.0422974143, -0.0440497228,  0.0421659217, -0.0457038988,  0.0130297644, -0.0790584149,  0.0324575936, -0.0523243472,  0.0843378318, -0.0339292663, -0.0407941897, -0.0707190009,   0.066051153, -0.0159499786,  0.0494383997, -0.1164883904,   0.102278307,  0.0041949298, -0.0761273485,  0.0101864555,  0.0631001082,  -0.019998177, -0.0062431099, -0.0291870113,  0.1196565296, -0.1592049587,  0.0597883353,  0.0493527328, -0.0446373336,  0.1005486124,  0.0295495842, -0.0279524238, -0.0272067342,  0.0204303838,  0.1640072941, -0.0827096335,  0.1583834821,  -0.200411969,  0.0321003256,  0.0306829265,  0.0851930944,  0.0340106556, -0.0065118714, -0.0810713761,  0.0919787474,  0.0065869107,  0.0037711427},
    {0.0202824492, -0.0524803071, -0.0141284129,  0.0269169492, -0.0672568283,  0.0325344587, -0.0467833933, -0.0159962446, -0.0457965856,  0.0086077162,  0.0522730585,  0.0618608292,   0.049588937, -0.0340194374,  0.0369943876, -0.1030865473,  0.1095298535, -0.0090158073,  0.0560076565, -0.0743609349,  0.0429554733,  0.0447908041,  0.0279892333,  0.0787436298, -0.0529211447,  0.0990387395, -0.0975186839, -0.0128550732, -0.0814047074, -0.0363364018, -0.0784828108,  0.0099852526, -0.0790395077,  0.0543206259,  0.0422994556,  0.0803255804, -0.0352310593,  -0.141515827,  0.0385565016, -0.0200539989,   0.067451645,   0.104936231,  0.0265677575, -0.0707576433, -0.0144927892, -0.1544908817,  0.0461362255, -0.1372557429,  0.0644587473},
    {0.0194508952,  0.0101782768,  0.0309478007, -0.0475163583, -0.0208180881,  0.0219417443, -0.0078650276,  -0.073651474,  0.0551648605,   0.034716305, -0.0457751458,  0.0124490582,  -0.055749827, -0.0324741896,  0.0868803721, -0.0444941628, -0.0429976833,  0.0681697381,  -0.042306766, -0.0127432542, -0.0491792266,  0.0539962412,  0.0618511661, -0.0838288896,  0.0407602105,  0.0330663263, -0.1033336662,  0.0765101866, -0.0063293773,  -0.012340991, -0.0055645996,   0.128216577, -0.0332023126, -0.0869615956,  0.0774823618, -0.0292662159, -0.1537900963,  0.0651508206, -0.1174359589,   0.082463107,  -0.012247629, -0.0094381284,  0.0679599849,  0.1236797757, -0.2303577461,  0.0281336027,  0.1347874094, -0.0305149827, -0.0261345525},
    {0.0203682292,  0.0059856136,  0.0531861003, -0.0281365496, -0.0114595724,  0.0149592195,  0.0679567602, -0.0727109706,  0.0154265025,  0.0110366976, -0.0212902484,   0.019856336,  0.0502312823,  -0.111922091,  0.0492093208, -0.0081679185, -0.0106470844,  0.0296308132, -0.0411515947,  0.0248436878,  0.0009616673, -0.1446687601,  0.1006197415, -0.0326671145, -0.0023557939,  0.0135813078, -0.0195051416,  0.0534504253, -0.0597517502,  0.0093520354, -0.0447079571, -0.1603183118,  0.1475563366, -0.0456127513,  0.0032757053,  0.0041420657, -0.0438618675,  0.0540672649, -0.0295968027,  0.0598165285,   -0.03199495,  0.0179652629, -0.1479960822, -0.0901493576,  0.2347053075, -0.0250085393, -0.1502726186,  0.0121539166,  0.0184267818},
    {0.0210522205, -0.0627875045,  0.0085907262,  0.0027864365, -0.0020137975, -0.0227289432, -0.0493474215, -0.0020900125, -0.0873822704,  0.1172213338,  0.0008980006,  0.0793022062, -0.0293270728,   0.001316831, -0.0350342403, -0.0067570918,  0.0114808908,  0.0527442968,  0.0016506317,  0.0558362076,  0.0611891117,  -0.001767953,    0.09516879, -0.0021691095,  0.1392486494, -0.1795499853, -0.0028969603, -0.1004671673,   0.003330975, -0.0772430935,  0.0442791619,  -0.005318317,  0.0644303208,  0.0119832529,  0.0746977827,  0.0227430992, -0.2308799965, -0.1101538672, -0.0486334891,  0.0110561397, -0.0125012799, -0.0662016742, -0.0564367259,  0.0352458242,  -0.043400479,  0.0472869248, -0.0922544935, -0.0466444234, -0.1343761881},
    {0.020701465,  0.0280102055, -0.0035458911,  0.0565211256,  0.0746478721,  -0.000250964, -0.0522830239, -0.0129052024,  0.0511784098,   0.112328154, -0.0160529305, -0.0456476333,   0.011848473, -0.0789520008, -0.0096249835,  0.0098632753,  0.1318875218, -0.0207607717, -0.0881730394,  0.0089603103,  0.0748811736,  0.0273639861, -0.0525928686,   0.003780387,   -0.04852777,  0.1067642882, -0.0302115815, -0.1079575928,  0.0256754399,  0.0488531957, -0.0144110829,  0.0996142353,  0.0191220854, -0.0033362707,   0.020801274, -0.1126363911,  0.1824577323, -0.1430293574, -0.0990259469,  0.0468475519,  0.0351717867, -0.0538842715, -0.0371911137,  0.0161222955,  0.0332293245,  0.0109552106,   0.177203235,  0.0482525979,  -0.130818771},
    {0.0205612273, -0.0321579929, -0.0510139225, -0.0138712889,  0.0191663406,   0.074858423,  0.0531674274,  0.0366685587, -0.0235470323,  0.0121855973, -0.0534344343, -0.1105644343, -0.0182425451, -0.0560140716,   0.054827399,  0.0192691082,   -0.01187318, -0.0311260924,   0.095296943,  0.1125534117, -0.0262179449,  0.0484354768, -0.0979410474, -0.0557298312, -0.0026692005, -0.0009891484,   0.045653949,  0.0461244738, -0.1115699083, -0.0672323205,  0.0907761759, -0.0329002362,  0.0970627525,  0.0960333288, -0.0108507751, -0.0068823208,  0.0492079283,  0.0380129349,  -0.029354465, -0.1617653065,  0.1578776886,  0.0593330702, -0.0690304181, -0.0249695836, -0.0580291736, -0.1502764066,  0.0528927267,  0.0037144271,  0.0153550319},
    {0.0202824461,  0.0455560922, -0.0374776587,  0.0140848969,  0.0316199285, -0.0779044276,  0.0043744709, -0.0283269752, -0.0472586998, -0.0438850741, -0.0616451978,  0.0562879936,  0.0507412734,  0.0224494284,  0.0914055735,   -0.04378484, -0.0506795099,  0.0825795456,  0.0542965225,   0.030243855, -0.0719175134,  0.0119637807, -0.0777234371,  0.0949644688,  0.0274850742,  0.0118346335,  0.1050237541, -0.0868271561, -0.0257443474, -0.1134368425,  0.0515900845, -0.0215759365,  0.0126137439, -0.1022629882, -0.0418141994,  0.0582885249,  0.0801699985, -0.1027345543, -0.1298549526,  0.0865685033, -0.0471300619,  0.1107420444, -0.0175931028,  0.1015201369,  0.0218353249,  0.0952825153,   0.110754535, -0.0617906013, -0.0393924984},
    {0.0208250655,  0.0200704899,  -0.056958915,  0.0153277578,  0.0187894418, -0.0572918795,  0.0804154548, -0.0395860949,   -0.00422254,  0.0059516415, -0.0482878647,  0.0906262299, -0.0787014063,  0.0698999244,  0.0086133026, -0.0074333364, -0.0016294811,  -0.017432763,  0.0902874282, -0.1278478628,  0.0564252015, -0.0965230993, -0.0233384208,  0.0212295562, -0.0073026605, -0.0088399088,  0.0208105665,  0.0293408479, -0.1278144169,  0.1494254898, -0.0189357283,  0.0933145929,  0.0403802452, -0.0479988505,  0.0065583922, -0.0067099142, -0.0625409336,  0.0406237276,  0.0246103264, -0.1731817089,  0.1693036807, -0.1235213472, -0.0030696722, -0.1019397199,  0.0571362944,  0.0213762135, -0.0044070699, -0.0231991592,  0.0324188949},
    {0.0199735954,  0.0378089349, -0.0219442856, -0.0418768305, -0.0774896103, -0.0375843899, -0.0278953729,  0.0400736715,  0.0097289117,  0.0725157349,  0.0847316612, -0.0150836066,  0.0503899025,  0.0181365587,  -0.008422948,  0.0463573324, -0.0233637629, -0.0888142679,  0.0036996335,  0.0586386047, -0.0137009534, -0.0676681145, -0.0026215371, -0.0613945749, -0.0880084735, -0.0334441924,  0.0354290334,  0.0178372413, -0.1086361635, -0.0441771948, -0.0713733578,  0.0401412614,  0.0107336182,   0.012583294,  0.1453652763,  0.1054188149,  0.2586246122, -0.0117150187,  0.0290917502,  0.1862142522, -0.0056377222, -0.0982309699,  0.0645504718,  0.0752290532, -0.0654015241,  0.0003809243,  0.0123669694, -0.0958372908, -0.0496436383},
    {0.020818087, -0.0005505991,  0.0116938589,  0.0604788992, -0.0083892325, -0.0009179462, -0.0421564243,  0.0363887422,  0.0845255987, -0.0067401581,  -0.000346644,  0.0023055646, -0.0423932716, -0.0656381935,  0.0541434667,  0.1114881649, -0.0137862522, -0.0054633664, -0.0032713753,  0.0058018042,  0.0338595755, -0.0946434392, -0.0666587528,  0.0761585746,  0.1240128958, -0.0052137212, -0.0135019812, -0.0078790272, -0.0079076277,  0.0004290558,  0.0951971536,  0.0305878522, -0.1154990401, -0.0721142371,  0.0938256557,  0.1409350219, -0.0491648624,  0.1310194089, -0.0318731536,  0.0116314944,  0.0136269359,  0.0887735021,  -0.077018979,  0.0958320317,   0.053628295, -0.0482097553, -0.2173435148,  0.1115780104,  0.1155756776},
    {0.0203870271,  0.0325861515, -0.0506932352, -0.0132337936, -0.0284823001, -0.0730960866,   0.052711694,   0.031702194, -0.0175446759, -0.0018137546,  0.0644307268,   0.107033001,  -0.024931696, -0.0477027508,  0.0472855063,  0.0190752295,  0.0188792632,  0.0167738488, -0.0900264412, -0.1045410079, -0.0319187148,  0.0386915187, -0.0851407277, -0.0621488954,  0.0005013342, -0.0003891854, -0.0584663238, -0.0310890266,  0.1157517779,  0.0558985545,  0.0640854706, -0.0134048246,  0.0917818287,  0.0982542251,  0.0040944126, -0.0101857076,  0.1104449651,  0.0305250409,  0.0698857448,  0.1764321062,  -0.130056441, -0.0016227283, -0.0296405455, -0.0291979323, -0.1877768518, -0.1348484094, -0.0361339476,  0.0405764197, -0.0066202923},
    {0.0207014611,   -0.04778272,  0.0401490764,  0.0098306614, -0.0210225911, -0.0882533903,  0.0059960904,    0.02274926, -0.0480370788,  0.0396473237, -0.0518545756, -0.0633492191, -0.0495494278,  0.0112181965, -0.0967923303, -0.0360421974,  0.0411307236,  0.0882781854, -0.0474423072,  0.0216687519, -0.0748109391, -0.0023777935, -0.1098208424, -0.0797217547,   0.030785203, -0.0240513656,   0.091023422,  0.1056561855, -0.0047137011,  0.1009436331, -0.0421316345, -0.0240819717,   -0.04547567, -0.0972495951,  0.0714914777,  0.0375338693,  0.0791907581, -0.1463528218,  0.1357205964,  0.0164634376,  0.0800137493,   0.065281002,  0.0996453734, -0.0626687173, -0.0015518547, -0.1111005035,  0.1981758268,  0.0156976294, -0.0288412703},
    {0.0210522259,  0.0291917615,  0.0077600883, -0.0557804457, -0.0733635981,   0.007177735, -0.0520767334, -0.0148758774,  0.0472105209,  0.1139073831, -0.0275186415, -0.0406217756, -0.0188578867,  0.0784440413,  0.0136168795, -0.0094096348, -0.1300231471,  0.0395088551,  0.0821946558, -0.0219326677,   0.066828488,  0.0393996709, -0.0573001498, -0.0039727672, -0.0566742401,  0.1030288893, -0.0401020247, -0.1135927793,  0.0587645364,  0.0423944514,  0.0545148495, -0.1008086215, -0.0223632863,  0.0202520663, -0.0357431023,  0.1224736937, -0.1052553971,  0.0973024175,  0.0741325528, -0.1770214658,  0.0231016069,  0.1023671186, -0.0792210315, -0.0931670509,  0.1371866987,  0.0064957562, -0.0487285469,  0.0313000073, -0.0647505762},
    {0.0203682219, -0.0281980357,   0.030799335,  0.0437324421, -0.0568748569, -0.0453592785, -0.0119232216,  0.0657532972,  0.0272068677, -0.0658823019, -0.0918973658, -0.0085684145, -0.0620407265,  0.0152662077,  0.0386756472, -0.0083931412, -0.0559162708, -0.1211079237, -0.0574978773,  0.0529814562, -0.0501664224,  -0.071542508,  0.0172500478, -0.0313421457, -0.0510620556, -0.0362960063, -0.1041114564, -0.1099812356,  0.0490401775,  0.0712897672,  0.0180224983, -0.1113556092,   -0.04042569, -0.0327145133, -0.0896243496, -0.0588230981, -0.1560753106, -0.0362642369, -0.0317024572,   0.034642919,  0.1465762599,  0.1098857689,  0.0549403154, -0.0377742147, -0.0507108554, -0.0446115749, -0.1592382826, -0.1449634482, -0.0513856277},
    {0.0213048133,  0.0322654049,  0.0540106094, -0.0097648096, -0.0122796299,  0.0831647948,  0.0582915363, -0.0247720289, -0.0200967448, -0.0120018588, -0.0401946166,  0.1234946778,  0.0382998284, -0.0324282882, -0.0589382734,  0.0139626083,  0.0112771776, -0.0359505805, -0.0690060279,  0.1323030393, -0.0017379086, -0.0326295626, -0.1008001537,  0.0396147848,  0.0039678843, -0.0025142847,   0.029696718, -0.0656841893, -0.0920799067,  0.1035406618, -0.0581331174, -0.0077125219, -0.1413774171,  0.0648011112,  0.0149627914, -0.0165993709, -0.1125925869,  0.0551710706, -0.0062229557, -0.0427161433, -0.0667658032,  0.0968945222, -0.1120357613,  0.0694575304,  -0.161786865,   0.124592664,    0.02673009, -0.0164351513, -0.0021546378},
    {0.0199680791, -0.0111999821, -0.0568559364,  0.0126614159, -0.0145140886,  0.0330471975,  0.0847943459, -0.0350040848,  0.0006259486, -0.0030131904,  0.0327477389, -0.0542300753, -0.0993180731,  0.0641274838, -0.0063785582, -0.0039784513,  0.0022694341,  0.0108176175, -0.0504456825,  0.0911235023,  0.0971096089, -0.0930462514,  0.0103370617,  0.0006011247, -0.0018748224,  0.0065013127, -0.0152189917, -0.0208950586,  0.0814915377, -0.1203339163, -0.0935259791,  0.1207323527,  0.0017609885, -0.0238253607, -0.0048377788,  0.0036578335,  0.0276655627,  0.0798476924, -0.0278155955,   0.115125998, -0.1239227522,  0.2160947926,  0.0478279548, -0.1507955175, -0.0807013294,  0.0374909897,  -0.156252116,  0.0860579746, -0.0046411691},
    {0.0208180756, -0.0283152971,  0.0531746253, -0.0128626233,  0.0193403687, -0.0645768944,  0.0661848307, -0.0354985464, -0.0115016395,  0.0037884913,  0.0480436001, -0.1100951269,  0.0525566234, -0.0512562095, -0.0370379083,  0.0176875435, -0.0096064804,  0.0104021224,  0.0768473956, -0.1394473831,  0.0147003998, -0.0726536664, -0.0597289683,  0.0362950789, -0.0077245742, -0.0031156061,  -0.033335383,  0.0190496333,  0.1078029318, -0.1418123402, -0.0528376917, -0.0800174704, -0.1033272555,  0.0665829804, -0.0023637566, -0.0035648442, -0.1705360192,   0.039449907, -0.0813858303,  0.1285385261,  0.0701441688,  0.0023452985, -0.1545968631,   0.031165733, -0.1103226761,   0.139159277, -0.0820180508, -0.0037035466, -0.0174286134},
    {0.0205612401,   5.08094e-05, -0.0599697854, -0.0152510048,  0.0056099862,  -0.000481297,  0.0943235396,  0.0415727566,  0.0063269043, -0.0033104317, -0.0084121468,  0.0032104786, -0.1245992066,  -0.079283635, -0.0131414809,  0.0005984955, -0.0043466777,  0.0041670916, -0.0028724412,  -0.010369562,  0.1412656474,  0.1302843646,  0.0364742048,  0.0133647776,   0.002709968,  0.0009506891,  0.0039360399, -0.0035824365, -0.0077908808,  0.0166699508, -0.1295308309, -0.1687238476,  -0.059464928, -0.0057079346,  0.0112680263,  0.0016603633, -0.0544086938, -0.0880434602, -0.0163257328,  0.0184092557, -0.0116675139, -0.1017999175,  0.0579493959,  0.2162504832,  0.0970533449,  0.0590556505,  0.0805733964, -0.0457137419, -0.0173292725},
    {0.0203193909, -0.0002663849,  -0.019101838,  0.0570743558,  0.0030772705, -0.0038653009, -0.0368583368, -0.0523907749,  0.0808267142, -0.0014552233, -0.0009041308,  0.0027128808,  0.0605680892,  -0.041085545, -0.0824717276,  0.0984590366, -0.0040740446, -0.0005630823,  0.0065828155, -0.0016613125,  0.0066680755,  0.1121162186, -0.0297031762,  -0.116083304,  0.1120194412, -0.0116586886,  0.0129376996,  0.0038072708,  0.0073365373,  0.0014589208, -0.1054154736, -0.0292928082,  0.1320532021, -0.0084106427,  -0.143429836,  0.1169353753, -0.0887242256,  0.0004768468,  0.0549310688, -0.0499451386,  0.0185320954, -0.0263350827,  0.0738200929, -0.1206179763,  -0.037473172,   0.052904617,  0.0217861956, -0.1506126961,   0.079265746}
};
static float temp_celcius = 20.0f;

float r_bar;
float c;

float nfc1_d1;
float nfc1_g;
float nfc1_del[NFC1_NMAX];

float nfc2_d1;
float nfc2_d2;
float nfc2_g;
float nfc2_del[NFC2_NMAX][2];

float nfc3_d1;
float nfc3_d2;
float nfc3_d3;
float nfc3_g;
float nfc3_del[NFC3_NMAX][3];

float nfc4_d1;
float nfc4_d2;
float nfc4_d3;
float nfc4_d4;
float nfc4_g;
float nfc4_del[NFC4_NMAX][4];

float nfc5_d1;
float nfc5_d2;
float nfc5_d3;
float nfc5_d4;
float nfc5_d5;
float nfc5_g;
float nfc5_del[NFC5_NMAX][5];

float nfc6_d11;
float nfc6_d12;
float nfc6_d21;
float nfc6_d22;
float nfc6_d31;
float nfc6_d32;
float nfc6_g;
float nfc6_del[NFC6_NMAX][6];

float xover_k;
float xover_k2;
float xover_d;
float xover_b_hf[3];
float xover_b_lf[3];
float xover_a[2];
float xover_iir_del[INPUTS];
float xover_fir0_del[INPUTS];
float xover_fir1_del[INPUTS][2];
float xover_fir2_del[INPUTS][2];

static bool initialization = true;

void syfala (
        sy_ap_int audio_in_0[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_1[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_2[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_3[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_4[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_5[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_6[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_7[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_8[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_9[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_10[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_11[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_12[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_13[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_14[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_15[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_16[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_17[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_18[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_19[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_20[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_21[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_22[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_23[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_24[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_25[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_26[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_27[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_28[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_29[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_30[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_31[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_32[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_33[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_34[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_35[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_36[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_37[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_38[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_39[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_40[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_41[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_42[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_43[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_44[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_45[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_46[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_47[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_in_48[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_0[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_1[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_2[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_3[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_4[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_5[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_6[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_7[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_8[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_9[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_10[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_11[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_12[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_13[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_14[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_15[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_16[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_17[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_18[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_19[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_20[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_21[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_22[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_23[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_24[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_25[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_26[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_27[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_28[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_29[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_30[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_31[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_32[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_33[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_34[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_35[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_36[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_37[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_38[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_39[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_40[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_41[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_42[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_43[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_44[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_45[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_46[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_47[SYFALA_BLOCK_NSAMPLES],
        sy_ap_int audio_out_48[SYFALA_BLOCK_NSAMPLES],
           int arm_ok,
         bool* i2s_rst,
        float* mem_zone_f,
          int* mem_zone_i,
          bool bypass,
          bool mute,
          bool debug
) {
#pragma HLS INTERFACE ap_fifo port=audio_in_0
#pragma HLS INTERFACE ap_fifo port=audio_in_1
#pragma HLS INTERFACE ap_fifo port=audio_in_2
#pragma HLS INTERFACE ap_fifo port=audio_in_3
#pragma HLS INTERFACE ap_fifo port=audio_in_4
#pragma HLS INTERFACE ap_fifo port=audio_in_5
#pragma HLS INTERFACE ap_fifo port=audio_in_6
#pragma HLS INTERFACE ap_fifo port=audio_in_7
#pragma HLS INTERFACE ap_fifo port=audio_in_8
#pragma HLS INTERFACE ap_fifo port=audio_in_9
#pragma HLS INTERFACE ap_fifo port=audio_in_10
#pragma HLS INTERFACE ap_fifo port=audio_in_11
#pragma HLS INTERFACE ap_fifo port=audio_in_12
#pragma HLS INTERFACE ap_fifo port=audio_in_13
#pragma HLS INTERFACE ap_fifo port=audio_in_14
#pragma HLS INTERFACE ap_fifo port=audio_in_15
#pragma HLS INTERFACE ap_fifo port=audio_in_16
#pragma HLS INTERFACE ap_fifo port=audio_in_17
#pragma HLS INTERFACE ap_fifo port=audio_in_18
#pragma HLS INTERFACE ap_fifo port=audio_in_19
#pragma HLS INTERFACE ap_fifo port=audio_in_20
#pragma HLS INTERFACE ap_fifo port=audio_in_21
#pragma HLS INTERFACE ap_fifo port=audio_in_22
#pragma HLS INTERFACE ap_fifo port=audio_in_23
#pragma HLS INTERFACE ap_fifo port=audio_in_24
#pragma HLS INTERFACE ap_fifo port=audio_in_25
#pragma HLS INTERFACE ap_fifo port=audio_in_26
#pragma HLS INTERFACE ap_fifo port=audio_in_27
#pragma HLS INTERFACE ap_fifo port=audio_in_28
#pragma HLS INTERFACE ap_fifo port=audio_in_29
#pragma HLS INTERFACE ap_fifo port=audio_in_30
#pragma HLS INTERFACE ap_fifo port=audio_in_31
#pragma HLS INTERFACE ap_fifo port=audio_in_32
#pragma HLS INTERFACE ap_fifo port=audio_in_33
#pragma HLS INTERFACE ap_fifo port=audio_in_34
#pragma HLS INTERFACE ap_fifo port=audio_in_35
#pragma HLS INTERFACE ap_fifo port=audio_in_36
#pragma HLS INTERFACE ap_fifo port=audio_in_37
#pragma HLS INTERFACE ap_fifo port=audio_in_38
#pragma HLS INTERFACE ap_fifo port=audio_in_39
#pragma HLS INTERFACE ap_fifo port=audio_in_40
#pragma HLS INTERFACE ap_fifo port=audio_in_41
#pragma HLS INTERFACE ap_fifo port=audio_in_42
#pragma HLS INTERFACE ap_fifo port=audio_in_43
#pragma HLS INTERFACE ap_fifo port=audio_in_44
#pragma HLS INTERFACE ap_fifo port=audio_in_45
#pragma HLS INTERFACE ap_fifo port=audio_in_46
#pragma HLS INTERFACE ap_fifo port=audio_in_47
#pragma HLS INTERFACE ap_fifo port=audio_in_48
#pragma HLS INTERFACE ap_fifo port=audio_out_0
#pragma HLS INTERFACE ap_fifo port=audio_out_1
#pragma HLS INTERFACE ap_fifo port=audio_out_2
#pragma HLS INTERFACE ap_fifo port=audio_out_3
#pragma HLS INTERFACE ap_fifo port=audio_out_4
#pragma HLS INTERFACE ap_fifo port=audio_out_5
#pragma HLS INTERFACE ap_fifo port=audio_out_6
#pragma HLS INTERFACE ap_fifo port=audio_out_7
#pragma HLS INTERFACE ap_fifo port=audio_out_8
#pragma HLS INTERFACE ap_fifo port=audio_out_9
#pragma HLS INTERFACE ap_fifo port=audio_out_10
#pragma HLS INTERFACE ap_fifo port=audio_out_11
#pragma HLS INTERFACE ap_fifo port=audio_out_12
#pragma HLS INTERFACE ap_fifo port=audio_out_13
#pragma HLS INTERFACE ap_fifo port=audio_out_14
#pragma HLS INTERFACE ap_fifo port=audio_out_15
#pragma HLS INTERFACE ap_fifo port=audio_out_16
#pragma HLS INTERFACE ap_fifo port=audio_out_17
#pragma HLS INTERFACE ap_fifo port=audio_out_18
#pragma HLS INTERFACE ap_fifo port=audio_out_19
#pragma HLS INTERFACE ap_fifo port=audio_out_20
#pragma HLS INTERFACE ap_fifo port=audio_out_21
#pragma HLS INTERFACE ap_fifo port=audio_out_22
#pragma HLS INTERFACE ap_fifo port=audio_out_23
#pragma HLS INTERFACE ap_fifo port=audio_out_24
#pragma HLS INTERFACE ap_fifo port=audio_out_25
#pragma HLS INTERFACE ap_fifo port=audio_out_26
#pragma HLS INTERFACE ap_fifo port=audio_out_27
#pragma HLS INTERFACE ap_fifo port=audio_out_28
#pragma HLS INTERFACE ap_fifo port=audio_out_29
#pragma HLS INTERFACE ap_fifo port=audio_out_30
#pragma HLS INTERFACE ap_fifo port=audio_out_31
#pragma HLS INTERFACE ap_fifo port=audio_out_32
#pragma HLS INTERFACE ap_fifo port=audio_out_33
#pragma HLS INTERFACE ap_fifo port=audio_out_34
#pragma HLS INTERFACE ap_fifo port=audio_out_35
#pragma HLS INTERFACE ap_fifo port=audio_out_36
#pragma HLS INTERFACE ap_fifo port=audio_out_37
#pragma HLS INTERFACE ap_fifo port=audio_out_38
#pragma HLS INTERFACE ap_fifo port=audio_out_39
#pragma HLS INTERFACE ap_fifo port=audio_out_40
#pragma HLS INTERFACE ap_fifo port=audio_out_41
#pragma HLS INTERFACE ap_fifo port=audio_out_42
#pragma HLS INTERFACE ap_fifo port=audio_out_43
#pragma HLS INTERFACE ap_fifo port=audio_out_44
#pragma HLS INTERFACE ap_fifo port=audio_out_45
#pragma HLS INTERFACE ap_fifo port=audio_out_46
#pragma HLS INTERFACE ap_fifo port=audio_out_47
#pragma HLS INTERFACE ap_fifo port=audio_out_48
#pragma HLS INTERFACE s_axilite port=arm_ok
#pragma HLS INTERFACE m_axi port=mem_zone_f latency=30 bundle=ram
#pragma HLS INTERFACE m_axi port=mem_zone_i latency=30 bundle=ram

    // Active high reset, this HAVE TO BE DONE FIRST (crash with *some* dsp if not)
    *i2s_rst = !arm_ok;

    /* Initialization and computations can start after the ARM
     * has been initialized */
    if (arm_ok) {
        /* First function call: initialization */
        if (initialization) {
            for(int i = 0; i < INPUTS; i++){
                r_bar += rs[i];
            }
            r_bar /= ns;
            c = 331.3f * sqrt(1.0f + (temp_celcius/273.15f)); // speed of sound m/s

            float nfc_omega = c/(r_bar*SYFALA_SAMPLE_RATE);
            float nfc_r1 = nfc_omega/2.0f;
            float nfc_r2 = nfc_r1 * nfc_r1;

            float nfc1_b1 = nfc_omega/2.0f;
            float nfc1_g1 = 1.0f + nfc1_b1;
            nfc1_d1 = 0.0f - (2.0f * nfc1_b1) / nfc1_g1;
            nfc1_g = 1.0f/nfc1_g1; // where 1.0f is gain in Faust but it's always 1
            for (int i = 0; i < NFC1_NMAX; ++i) {
                nfc1_del[i] = 0.0f;
            }


            float nfc2_b1 = 3.0f * nfc_r1;
            float nfc2_b2 = 3.0f * nfc_r2;
            float nfc2_g2 = 1.0f + nfc2_b1 + nfc2_b2;
            nfc2_d1 = 0.0f - (2.0f * nfc2_b1 + 4.0f * nfc2_b2) / nfc2_g2;
            nfc2_d2 = 0.0f - (4.0f * nfc2_b2) / nfc2_g2;
            nfc2_g = 1.0f/nfc2_g2; // where 1.0f is gain in Faust but it's always 1
            for (int i = 0; i < NFC2_NMAX; ++i) {
                for (int j = 0; j < 2; ++j){
                    nfc2_del[i][j] = 0.0f;
                }
            }

            float nfc3_b1 = 3.677814645373914f * nfc_r1;
            float nfc3_b2 = 6.459432693483369f * nfc_r2;
            float nfc3_g2 = 1.0f + nfc3_b1 + nfc3_b2;
            nfc3_d1 = 0.0f - (2.0f * nfc3_b1 + 4.0f * nfc3_b2) / nfc3_g2;
            nfc3_d2 = 0.0f - (4.0f * nfc3_b2) / nfc3_g2;
            float nfc3_b3 = 2.322185354626086f * nfc_r1;
            float nfc3_g3 = 1.0f + nfc3_b3;
            nfc3_d3 = 0.0f - (2.0f * nfc3_b3) / nfc3_g3;
            nfc3_g = 1.0f/(nfc3_g3*nfc3_g2); // where 1.0f is gain in Faust but it's always 1
            for (int i = 0; i < NFC3_NMAX; ++i) {
                for (int j = 0; j < 3; ++j){
                    nfc3_del[i][j] = 0.0f;
                }
            }

            float nfc4_b1 =  4.207578794359250f * nfc_r1;
            float nfc4_b2 = 11.487800476871168f * nfc_r2;
            float nfc4_g2 = 1.0f + nfc4_b1 + nfc4_b2;
            nfc4_d1 = 0.0f - (2.0f * nfc4_b1 + 4.0f * nfc4_b2) / nfc4_g2;
            nfc4_d2 = 0.0f - (4.0f * nfc4_b2) / nfc4_g2;
            float nfc4_b3 = 5.792421205640748f * nfc_r1;
            float nfc4_b4 = 9.140130890277934f * nfc_r2;
            float nfc4_g3 = 1.0f + nfc4_b3 + nfc4_b4;
            nfc4_d3 = 0.0f - (2.0f * nfc4_b3 + 4.0f * nfc4_b4) / nfc4_g3;
            nfc4_d4 = 0.0f - (4.0f * nfc4_b4) / nfc4_g3;
            nfc4_g = 1.0f/(nfc4_g3*nfc4_g2); // where 1.0f is gain in Faust but it's always 1
            for (int i = 0; i < NFC4_NMAX; ++i) {
                for (int j = 0; j < 4; ++j){
                    nfc4_del[i][j] = 0.0f;
                }
            }

            float nfc5_b1 =  4.649348606363304f * nfc_r1;
            float nfc5_b2 = 18.156315313452325f * nfc_r2;
            float nfc5_g2 = 1.0f + nfc5_b1 + nfc5_b2;
            nfc5_d1 = 0.0f - (2.0f * nfc5_b1 + 4.0f * nfc5_b2) / nfc5_g2;  // fixed
            nfc5_d2 = 0.0f - (4.0 * nfc5_b2) / nfc5_g2;
            float nfc5_b3 =  6.703912798306966f * nfc_r1;
            float nfc5_b4 = 14.272480513279568f * nfc_r2;
            float nfc5_g3 = 1.0f + nfc5_b3 + nfc5_b4;
            nfc5_d3 = 0.0f - (2.0f * nfc5_b3 + 4 * nfc5_b4) / nfc5_g3;  // fixed
            nfc5_d4 = 0.0f - (4.0f * nfc5_b4) / nfc5_g3;
            float nfc5_b5 = 3.646738595329718f * nfc_r1;
            float nfc5_g4 = 1.0f + nfc5_b5;
            nfc5_d5 = 0.0f - (2.0f * nfc5_b5) / nfc5_g4;
            nfc5_g = 1.0f/(nfc5_g4*nfc5_g3*nfc5_g2);
            for (int i = 0; i < NFC5_NMAX; ++i) {
                for (int j = 0; j < 5; ++j){
                    nfc5_del[i][j] = 0.0f;
                }
            }

            float nfc6_b11 =  5.031864495621642f * nfc_r1;
            float nfc6_b12 = 26.514025344067996f * nfc_r2;
            float nfc6_g1 = 1.0f + nfc6_b11 + nfc6_b12;
            nfc6_d11 = 0.0f - (2.0f * nfc6_b11 + 4.0f * nfc6_b12) / nfc6_g1;
            nfc6_d12 = 0.0f - (4.0f * nfc6_b12) / nfc6_g1;
            float nfc6_b21 =  7.471416712651683f * nfc_r1;
            float nfc6_b22 = 20.852823177396761f * nfc_r2;
            float nfc6_g2 = 1.0f + nfc6_b21 + nfc6_b22;
            nfc6_d21 = 0.0f - (2.0f * nfc6_b21 + 4.0f * nfc6_b22) / nfc6_g2;
            nfc6_d22 = 0.0f - (4.0f * nfc6_b22) / nfc6_g2;
            float nfc6_b31 =  8.496718791726696f * nfc_r1;
            float nfc6_b32 = 18.801130589570320f * nfc_r2;
            float nfc6_g3 = 1.0f + nfc6_b31 + nfc6_b32;
            nfc6_d31 = 0.0f - (2.0f * nfc6_b31 + 4.0f * nfc6_b32) / nfc6_g3;
            nfc6_d32 = 0.0f - (4.0f * nfc6_b32) / nfc6_g3;
            nfc6_g = 1.0f/(nfc6_g3*nfc6_g2*nfc6_g1); // where 1.0f is gain in Faust but it's always 1
            for (int i = 0; i < NFC6_NMAX; ++i) {
                for (int j = 0; j < 6; ++j){
                    nfc6_del[i][j] = 0.0f;
                }
            }

            xover_k = tan(M_PI*xover_freq/SYFALA_SAMPLE_RATE);
            xover_k2 = xover_k*xover_k;
            xover_d =  xover_k2 + 2.0f*xover_k + 1.0f;
            xover_b_hf[0] = 1.0f/xover_d;
            xover_b_hf[1] = -2.0f/xover_d;
            xover_b_hf[2] = 1.0f/xover_d;
            xover_b_lf[0] = xover_k2/xover_d;
            xover_b_lf[1] = 2.0f*xover_k2/xover_d;
            xover_b_lf[2] = xover_k2/xover_d;
            xover_a[0] = 2.0f * (xover_k2 - 1.0f) / xover_d;
            xover_a[1] = (xover_k2 - 2.0f*xover_k + 1.0f) / xover_d;
            for(int i = 0; i < INPUTS; i++){
                xover_iir_del[i] = 0.0f;
                xover_fir0_del[i] = 0.0f;
                xover_fir1_del[i][0] = 0.0f;
                xover_fir1_del[i][1] = 0.0f;
                xover_fir2_del[i][0] = 0.0f;
                xover_fir2_del[i][1] = 0.0f;
            }

            initialization = false;
        } else {
            /* Every other iterations:
             * either process the bypass & mute switches... */
            if (bypass) {
                for (int n = 0; n < SYFALA_BLOCK_NSAMPLES; ++n) {
                     audio_out_0[n] = audio_in_0[n];
                     audio_out_1[n] = audio_in_1[n];
                     audio_out_2[n] = audio_in_2[n];
                     audio_out_3[n] = audio_in_3[n];
                     audio_out_4[n] = audio_in_4[n];
                     audio_out_5[n] = audio_in_5[n];
                     audio_out_6[n] = audio_in_6[n];
                     audio_out_7[n] = audio_in_7[n];
                     audio_out_8[n] = audio_in_8[n];
                     audio_out_9[n] = audio_in_9[n];
                     audio_out_10[n] = audio_in_10[n];
                     audio_out_11[n] = audio_in_11[n];
                     audio_out_12[n] = audio_in_12[n];
                     audio_out_13[n] = audio_in_13[n];
                     audio_out_14[n] = audio_in_14[n];
                     audio_out_15[n] = audio_in_15[n];
                     audio_out_16[n] = audio_in_16[n];
                     audio_out_17[n] = audio_in_17[n];
                     audio_out_18[n] = audio_in_18[n];
                     audio_out_19[n] = audio_in_19[n];
                     audio_out_20[n] = audio_in_20[n];
                     audio_out_21[n] = audio_in_21[n];
                     audio_out_22[n] = audio_in_22[n];
                     audio_out_23[n] = audio_in_23[n];
                     audio_out_24[n] = audio_in_24[n];
                     audio_out_25[n] = audio_in_25[n];
                     audio_out_26[n] = audio_in_26[n];
                     audio_out_27[n] = audio_in_27[n];
                     audio_out_28[n] = audio_in_28[n];
                     audio_out_29[n] = audio_in_29[n];
                     audio_out_30[n] = audio_in_30[n];
                     audio_out_31[n] = audio_in_31[n];
                     audio_out_32[n] = audio_in_32[n];
                     audio_out_33[n] = audio_in_33[n];
                     audio_out_34[n] = audio_in_34[n];
                     audio_out_35[n] = audio_in_35[n];
                     audio_out_36[n] = audio_in_36[n];
                     audio_out_37[n] = audio_in_37[n];
                     audio_out_38[n] = audio_in_38[n];
                     audio_out_39[n] = audio_in_39[n];
                     audio_out_40[n] = audio_in_40[n];
                     audio_out_41[n] = audio_in_41[n];
                     audio_out_42[n] = audio_in_42[n];
                     audio_out_43[n] = audio_in_43[n];
                     audio_out_44[n] = audio_in_44[n];
                     audio_out_45[n] = audio_in_45[n];
                     audio_out_46[n] = audio_in_46[n];
                     audio_out_47[n] = audio_in_47[n];
                     audio_out_48[n] = audio_in_48[n];
                }
            } else if (mute) {
                for (int n = 0; n < SYFALA_BLOCK_NSAMPLES; ++n) {
                     audio_out_0[n] = 0;
                     audio_out_1[n] = 0;
                     audio_out_2[n] = 0;
                     audio_out_3[n] = 0;
                     audio_out_4[n] = 0;
                     audio_out_5[n] = 0;
                     audio_out_6[n] = 0;
                     audio_out_7[n] = 0;
                     audio_out_8[n] = 0;
                     audio_out_9[n] = 0;
                     audio_out_10[n] = 0;
                     audio_out_11[n] = 0;
                     audio_out_12[n] = 0;
                     audio_out_13[n] = 0;
                     audio_out_14[n] = 0;
                     audio_out_15[n] = 0;
                     audio_out_16[n] = 0;
                     audio_out_17[n] = 0;
                     audio_out_18[n] = 0;
                     audio_out_19[n] = 0;
                     audio_out_20[n] = 0;
                     audio_out_21[n] = 0;
                     audio_out_22[n] = 0;
                     audio_out_23[n] = 0;
                     audio_out_24[n] = 0;
                     audio_out_25[n] = 0;
                     audio_out_26[n] = 0;
                     audio_out_27[n] = 0;
                     audio_out_28[n] = 0;
                     audio_out_29[n] = 0;
                     audio_out_30[n] = 0;
                     audio_out_31[n] = 0;
                     audio_out_32[n] = 0;
                     audio_out_33[n] = 0;
                     audio_out_34[n] = 0;
                     audio_out_35[n] = 0;
                     audio_out_36[n] = 0;
                     audio_out_37[n] = 0;
                     audio_out_38[n] = 0;
                     audio_out_39[n] = 0;
                     audio_out_40[n] = 0;
                     audio_out_41[n] = 0;
                     audio_out_42[n] = 0;
                     audio_out_43[n] = 0;
                     audio_out_44[n] = 0;
                     audio_out_45[n] = 0;
                     audio_out_46[n] = 0;
                     audio_out_47[n] = 0;
                     audio_out_48[n] = 0;
                }
            } else {
                /* ... or compute samples here
                 * if you need to convert to float, use the following:
                 * (audio inputs and outputs are 24-bit integers) */
                float ins[INPUTS][SYFALA_BLOCK_NSAMPLES] = {0.0f};
                float outs[OUTPUTS][SYFALA_BLOCK_NSAMPLES] = {{0.0f}};

                for (int n = 0; n < SYFALA_BLOCK_NSAMPLES; ++n) {
                    ins[0][n] = Syfala::HLS::ioreadf(audio_in_0[n]);
                    ins[1][n] = Syfala::HLS::ioreadf(audio_in_1[n]);
                    ins[2][n] = Syfala::HLS::ioreadf(audio_in_2[n]);
                    ins[3][n] = Syfala::HLS::ioreadf(audio_in_3[n]);
                    ins[4][n] = Syfala::HLS::ioreadf(audio_in_4[n]);
                    ins[5][n] = Syfala::HLS::ioreadf(audio_in_5[n]);
                    ins[6][n] = Syfala::HLS::ioreadf(audio_in_6[n]);
                    ins[7][n] = Syfala::HLS::ioreadf(audio_in_7[n]);
                    ins[8][n] = Syfala::HLS::ioreadf(audio_in_8[n]);
                    ins[9][n] = Syfala::HLS::ioreadf(audio_in_9[n]);
                    ins[10][n] = Syfala::HLS::ioreadf(audio_in_10[n]);
                    ins[11][n] = Syfala::HLS::ioreadf(audio_in_11[n]);
                    ins[12][n] = Syfala::HLS::ioreadf(audio_in_12[n]);
                    ins[13][n] = Syfala::HLS::ioreadf(audio_in_13[n]);
                    ins[14][n] = Syfala::HLS::ioreadf(audio_in_14[n]);
                    ins[15][n] = Syfala::HLS::ioreadf(audio_in_15[n]);
                    ins[16][n] = Syfala::HLS::ioreadf(audio_in_16[n]);
                    ins[17][n] = Syfala::HLS::ioreadf(audio_in_17[n]);
                    ins[18][n] = Syfala::HLS::ioreadf(audio_in_18[n]);
                    ins[19][n] = Syfala::HLS::ioreadf(audio_in_19[n]);
                    ins[20][n] = Syfala::HLS::ioreadf(audio_in_20[n]);
                    ins[21][n] = Syfala::HLS::ioreadf(audio_in_21[n]);
                    ins[22][n] = Syfala::HLS::ioreadf(audio_in_22[n]);
                    ins[23][n] = Syfala::HLS::ioreadf(audio_in_23[n]);
                    ins[24][n] = Syfala::HLS::ioreadf(audio_in_24[n]);
                    ins[25][n] = Syfala::HLS::ioreadf(audio_in_25[n]);
                    ins[26][n] = Syfala::HLS::ioreadf(audio_in_26[n]);
                    ins[27][n] = Syfala::HLS::ioreadf(audio_in_27[n]);
                    ins[28][n] = Syfala::HLS::ioreadf(audio_in_28[n]);
                    ins[29][n] = Syfala::HLS::ioreadf(audio_in_29[n]);
                    ins[30][n] = Syfala::HLS::ioreadf(audio_in_30[n]);
                    ins[31][n] = Syfala::HLS::ioreadf(audio_in_31[n]);
                    ins[32][n] = Syfala::HLS::ioreadf(audio_in_32[n]);
                    ins[33][n] = Syfala::HLS::ioreadf(audio_in_33[n]);
                    ins[34][n] = Syfala::HLS::ioreadf(audio_in_34[n]);
                    ins[35][n] = Syfala::HLS::ioreadf(audio_in_35[n]);
                    ins[36][n] = Syfala::HLS::ioreadf(audio_in_36[n]);
                    ins[37][n] = Syfala::HLS::ioreadf(audio_in_37[n]);
                    ins[38][n] = Syfala::HLS::ioreadf(audio_in_38[n]);
                    ins[39][n] = Syfala::HLS::ioreadf(audio_in_39[n]);
                    ins[40][n] = Syfala::HLS::ioreadf(audio_in_40[n]);
                    ins[41][n] = Syfala::HLS::ioreadf(audio_in_41[n]);
                    ins[42][n] = Syfala::HLS::ioreadf(audio_in_42[n]);
                    ins[43][n] = Syfala::HLS::ioreadf(audio_in_43[n]);
                    ins[44][n] = Syfala::HLS::ioreadf(audio_in_44[n]);
                    ins[45][n] = Syfala::HLS::ioreadf(audio_in_45[n]);
                    ins[46][n] = Syfala::HLS::ioreadf(audio_in_46[n]);
                    ins[47][n] = Syfala::HLS::ioreadf(audio_in_47[n]);
                    ins[48][n] = Syfala::HLS::ioreadf(audio_in_48[n]);
                }

                // this section will be automatically generated in function of the value of co...
                int nfc1_n = 0;
                int nfc2_n = 0;
                int nfc3_n = 0;
                int nfc4_n = 0;
                int nfc5_n = 0;
                int nfc6_n = 0;
                for(int i = 0; i < INPUTS; i++){
                    if(co[i] == 1){ // NFC 1
                        for (int n = 0; n < SYFALA_BLOCK_NSAMPLES; ++n) {
                            ins[i][n] = ins[i][n]*nfc1_g + nfc1_del[nfc1_n]*nfc1_d1;
                            nfc1_del[nfc1_n] = ins[i][n] + nfc1_del[nfc1_n];
                        }
                        nfc1_n++;
                    }
                    else if(co[i] == 2){ // NFC 2
                        for (int n = 0; n < SYFALA_BLOCK_NSAMPLES; ++n) {
                            ins[i][n] = ins[i][n]*nfc2_g + nfc2_del[nfc2_n][0]*nfc2_d1 + nfc2_del[nfc2_n][1]*nfc2_d2;
                            nfc2_del[nfc2_n][0] = ins[i][n] + nfc2_del[nfc2_n][0];
                            nfc2_del[nfc2_n][1] = nfc2_del[nfc2_n][0] + nfc2_del[nfc2_n][1];
                        }
                        nfc2_n++;
                    }
                    else if(co[i] == 3){ // NFC 3
                        for (int n = 0; n < SYFALA_BLOCK_NSAMPLES; ++n) {
                            ins[i][n] = ins[i][n]*nfc3_g + nfc3_del[nfc3_n][0]*nfc3_d1 + nfc3_del[nfc3_n][1]*nfc3_d2;
                            nfc3_del[nfc3_n][0] = ins[i][n] + nfc3_del[nfc3_n][0];
                            nfc3_del[nfc3_n][1] = nfc3_del[nfc3_n][0] + nfc3_del[nfc3_n][1];
                            ins[i][n] = ins[i][n] + nfc3_del[nfc3_n][2]*nfc3_d3;
                            nfc3_del[nfc3_n][2] = ins[i][n] + nfc3_del[nfc3_n][2];
                        }
                        nfc3_n++;
                    }
                    else if(co[i] == 4){ // NFC 4
                        for (int n = 0; n < SYFALA_BLOCK_NSAMPLES; ++n) {
                            ins[i][n] = ins[i][n]*nfc4_g + nfc4_del[nfc4_n][0]*nfc4_d1 + nfc4_del[nfc4_n][1]*nfc4_d2;
                            nfc4_del[nfc4_n][1] = ins[i][n] + nfc4_del[nfc4_n][0];
                            nfc4_del[nfc4_n][1] = nfc4_del[nfc4_n][0] + nfc4_del[nfc4_n][1];
                            ins[i][n] = ins[i][n] + nfc4_del[nfc4_n][2]*nfc4_d3 + nfc4_del[nfc4_n][2]*nfc4_d4;
                            nfc4_del[nfc4_n][2] = ins[i][n] + nfc4_del[nfc4_n][2];
                            nfc4_del[nfc4_n][3] = nfc4_del[nfc4_n][3] + nfc4_del[nfc4_n][3];
                        }
                        nfc4_n++;
                    }
                    else if(co[i] == 5){ // NFC 5
                        for (int n = 0; n < SYFALA_BLOCK_NSAMPLES; ++n) {
                            ins[i][n] = ins[i][n]*nfc5_g + nfc5_del[nfc5_n][0]*nfc5_d1 + nfc5_del[nfc5_n][1]*nfc5_d2;
                            nfc5_del[nfc5_n][1] = ins[i][n] + nfc5_del[nfc5_n][0];
                            nfc5_del[nfc5_n][1] = nfc5_del[nfc5_n][0] + nfc5_del[nfc5_n][1];
                            ins[i][n] = ins[i][n] + nfc5_del[nfc5_n][2]*nfc5_d3 + nfc5_del[nfc5_n][2]*nfc5_d4;
                            nfc5_del[nfc5_n][2] = ins[i][n] + nfc5_del[nfc5_n][2];
                            nfc5_del[nfc5_n][3] = nfc5_del[nfc5_n][3] + nfc5_del[nfc5_n][3];
                            ins[i][n] = ins[i][n] + nfc5_del[nfc5_n][4]*nfc5_d5;
                            nfc5_del[nfc5_n][4] = ins[i][n] + nfc5_del[nfc5_n][4];
                        }
                        nfc5_n++;
                    }
                    else if(co[i] == 6){ // NFC 6
                        for (int n = 0; n < SYFALA_BLOCK_NSAMPLES; ++n) {
                            ins[i][n] = ins[i][n]*nfc6_g + nfc6_del[nfc6_n][0]*nfc6_d11 + nfc6_del[nfc6_n][1]*nfc6_d12;
                            nfc6_del[nfc6_n][1] = ins[i][n] + nfc6_del[nfc6_n][0];
                            nfc6_del[nfc6_n][1] = nfc6_del[nfc6_n][0] + nfc6_del[nfc6_n][1];
                            ins[i][n] = ins[i][n] + nfc6_del[nfc6_n][2]*nfc6_d21 + nfc6_del[nfc6_n][2]*nfc6_d22;
                            nfc6_del[nfc6_n][2] = ins[i][n] + nfc6_del[nfc6_n][2];
                            nfc6_del[nfc6_n][3] = nfc6_del[nfc6_n][3] + nfc6_del[nfc6_n][3];
                            ins[i][n] = ins[i][n] + nfc6_del[nfc6_n][4]*nfc6_d31 + nfc6_del[nfc6_n][5]*nfc6_d32;
                            nfc6_del[nfc6_n][4] = ins[i][n] + nfc6_del[nfc6_n][4];
                            nfc6_del[nfc6_n][5] = nfc6_del[nfc6_n][5] + nfc6_del[nfc6_n][5];
                        }
                        nfc6_n++;
                    }
                         // shelf filter decoder
                         for (int n = 0; n < SYFALA_BLOCK_NSAMPLES; ++n) {
                            ins[i][n] = ins[i][n] - xover_iir_del[i];
                            xover_iir_del[i] = ins[i][n]*xover_a[0] + xover_fir0_del[i]*xover_a[1];
                            xover_fir0_del[i] = ins[i][n];
                            float fir1_y = ins[i][n]*xover_b_lf[0] + xover_fir1_del[i][0]*xover_b_lf[1] + xover_fir1_del[i][1]*xover_b_lf[2];
                            xover_fir1_del[i][1] = xover_fir1_del[i][0];
                            xover_fir1_del[i][0] = ins[i][n];
                            float fir2_y = ins[i][n]*xover_b_hf[0] + xover_fir2_del[i][0]*xover_b_hf[1] + xover_fir2_del[i][1]*xover_b_hf[2];
                            xover_fir2_del[i][1] = xover_fir2_del[i][0];
                            xover_fir2_del[i][0] = ins[i][n];
                            ins[i][n] = fir1_y*(gammas[0][co[i]]/lfhf_ratio) - fir2_y*(gammas[1][co[i]]*lfhf_ratio);
                         }
                     }

                     // speaker chain scaling
                     for(int i = 0; i < OUTPUTS; i++){
                         for(int j = 0; j < INPUTS; j++){
                             for (int n = 0; n < SYFALA_BLOCK_NSAMPLES; ++n) {
                                outs[i][n] += ins[j][n]*s[i][j];
                             }
                         }
                         for (int n = 0; n < SYFALA_BLOCK_NSAMPLES; ++n) {
                            outs[i][n] *= output_gain;
                         }
                     }

                    for (int n = 0; n < SYFALA_BLOCK_NSAMPLES; ++n) {
                         Syfala::HLS::iowritef(outs[0][n], &audio_out_0[n]);
                         Syfala::HLS::iowritef(outs[1][n], &audio_out_1[n]);
                         Syfala::HLS::iowritef(outs[2][n], &audio_out_2[n]);
                         Syfala::HLS::iowritef(outs[3][n], &audio_out_3[n]);
                         Syfala::HLS::iowritef(outs[4][n], &audio_out_4[n]);
                         Syfala::HLS::iowritef(outs[5][n], &audio_out_5[n]);
                         Syfala::HLS::iowritef(outs[6][n], &audio_out_6[n]);
                         Syfala::HLS::iowritef(outs[7][n], &audio_out_7[n]);
                         Syfala::HLS::iowritef(outs[8][n], &audio_out_8[n]);
                         Syfala::HLS::iowritef(outs[9][n], &audio_out_9[n]);
                         Syfala::HLS::iowritef(outs[10][n], &audio_out_10[n]);
                         Syfala::HLS::iowritef(outs[11][n], &audio_out_11[n]);
                         Syfala::HLS::iowritef(outs[12][n], &audio_out_12[n]);
                         Syfala::HLS::iowritef(outs[13][n], &audio_out_13[n]);
                         Syfala::HLS::iowritef(outs[14][n], &audio_out_14[n]);
                         Syfala::HLS::iowritef(outs[15][n], &audio_out_15[n]);
                         Syfala::HLS::iowritef(outs[16][n], &audio_out_16[n]);
                         Syfala::HLS::iowritef(outs[17][n], &audio_out_17[n]);
                         Syfala::HLS::iowritef(outs[18][n], &audio_out_18[n]);
                         Syfala::HLS::iowritef(outs[19][n], &audio_out_19[n]);
                         Syfala::HLS::iowritef(outs[20][n], &audio_out_20[n]);
                         Syfala::HLS::iowritef(outs[21][n], &audio_out_21[n]);
                         Syfala::HLS::iowritef(outs[22][n], &audio_out_22[n]);
                         Syfala::HLS::iowritef(outs[23][n], &audio_out_23[n]);
                         Syfala::HLS::iowritef(outs[24][n], &audio_out_24[n]);
                         Syfala::HLS::iowritef(outs[25][n], &audio_out_25[n]);
                         Syfala::HLS::iowritef(outs[26][n], &audio_out_26[n]);
                         Syfala::HLS::iowritef(outs[27][n], &audio_out_27[n]);
                         Syfala::HLS::iowritef(outs[28][n], &audio_out_28[n]);
                         Syfala::HLS::iowritef(outs[29][n], &audio_out_29[n]);
                         Syfala::HLS::iowritef(outs[30][n], &audio_out_30[n]);
                         Syfala::HLS::iowritef(outs[31][n], &audio_out_31[n]);
                         Syfala::HLS::iowritef(outs[32][n], &audio_out_32[n]);
                         Syfala::HLS::iowritef(outs[33][n], &audio_out_33[n]);
                         Syfala::HLS::iowritef(outs[34][n], &audio_out_34[n]);
                         Syfala::HLS::iowritef(outs[35][n], &audio_out_35[n]);
                         Syfala::HLS::iowritef(outs[36][n], &audio_out_36[n]);
                         Syfala::HLS::iowritef(outs[37][n], &audio_out_37[n]);
                         Syfala::HLS::iowritef(outs[38][n], &audio_out_38[n]);
                         Syfala::HLS::iowritef(outs[39][n], &audio_out_39[n]);
                         Syfala::HLS::iowritef(outs[40][n], &audio_out_40[n]);
                         Syfala::HLS::iowritef(outs[41][n], &audio_out_41[n]);
                         Syfala::HLS::iowritef(outs[42][n], &audio_out_42[n]);
                         Syfala::HLS::iowritef(outs[43][n], &audio_out_43[n]);
                         Syfala::HLS::iowritef(outs[44][n], &audio_out_44[n]);
                         Syfala::HLS::iowritef(outs[45][n], &audio_out_45[n]);
                         Syfala::HLS::iowritef(outs[46][n], &audio_out_46[n]);
                         Syfala::HLS::iowritef(outs[47][n], &audio_out_47[n]);
                         Syfala::HLS::iowritef(outs[48][n], &audio_out_48[n]);
                     }
            }
        }
    }
}
