declare name    "Filtered x Least Mean Square Algorith";
declare version "1.0";
declare author  "Pierre Lecomte";
declare author  "Loic Alexandre";
declare license "CC-BY-NC-SA-4.0";

import("stdfaust.lib");

N = 20;
coeffs = si.bus(N);
in = 4;
out = 4;
in_out = si.bus(in*out);

freq_band = fi.bandpass(4,hslider("s:[0]Signal/s:[2]Noise/[2]Low frequency cut", 100,50,10000,1), hslider("s:[0]Signal/s:[2]Noise/[3]High frequency cut", 500,50,10000,1));
noise = (no.noise:freq_band)*hslider("s:[0]Signal/s:[2]Noise/[1]Volume" , 1,0,10,0.1);
sine_freq = hslider("s:[0]Signal/s:[1]Sine/[2]Frequency",300,50,10000,10);
sine = os.osc(sine_freq)*hslider("s:[0]Signal/s:[1]Sine/[1]Volume" , 1,0,10,0.1);
signal = (sine*checkbox("s:[0]Signal/s:[1]Sine/[0]On/Off"), noise*checkbox("s:[0]Signal/s:[2]Noise/[0]On/Off")):>_*(1-checkbox("s:[0]Signal/[0]Mute")); // Reference signal
x = (signal:_<:(_,_,_)); // Input signal

// Convergence coefficients
mu = -0.001*checkbox("a:[1]ANC/[0]On/Off"); 
lambda = 0.9;
delta = 1e-5;

reset = 1-button("a:[1]ANC/[1]reset");

// Adapted filters
filter_adapt(n) = (si.bus(n),(_<:(si.bus(n)))):ro.interleave(n,2):sum(i, n, (_,@(i):*));

H = (si.bus(in*N):par(i,in*N,_*reset)),(_<:par(i, in, _)):seq(i,in-1,si.bus(N*(i+1)+i), ro.crossn1(N*in-N*(i+1)), si.bus(out-(i+1))):par(i,in,((si.bus(N)<:si.bus(2*N)),_):(si.bus(N),filter_adapt(N))):seq(i,out-1, si.bus(N*in - (N*(i+1)) + out-(i+1)-1), ro.cross1n(N*(i+1)), si.bus(1+i));

// HP 1 to mics 1, 2, 3, 4
C11 = fi.fir((0.9678478571452631,-1.1215607340624645,-0.6183420250859051,-1.1220111581747216,0.521880473512896,-0.9041921022105524,4.506926675177769,-0.8355807146934056,-1.195945255128949,-0.4793118819275238,-1.340724311141059,0.09946001350488004,-0.2909006537314907,1.0841132429155134,0.4019852599236094,0.4032405472272947,0.8684617329191759,-0.5616459090331902,-0.13333986747552765,-0.02951610401317364));
C12 = fi.fir((0.9678478571452631,-1.1215607340624645,-0.6183420250859051,-1.1220111581747216,0.521880473512896,-0.9041921022105524,4.506926675177769,-0.8355807146934056,-1.195945255128949,-0.4793118819275238,-1.340724311141059,0.09946001350488004,-0.2909006537314907,1.0841132429155134,0.4019852599236094,0.4032405472272947,0.8684617329191759,-0.5616459090331902,-0.13333986747552765,-0.02951610401317364));
C13 = fi.fir((0.9678478571452631,-1.1215607340624645,-0.6183420250859051,-1.1220111581747216,0.521880473512896,-0.9041921022105524,4.506926675177769,-0.8355807146934056,-1.195945255128949,-0.4793118819275238,-1.340724311141059,0.09946001350488004,-0.2909006537314907,1.0841132429155134,0.4019852599236094,0.4032405472272947,0.8684617329191759,-0.5616459090331902,-0.13333986747552765,-0.02951610401317364));
C14 = fi.fir((0.9678478571452631,-1.1215607340624645,-0.6183420250859051,-1.1220111581747216,0.521880473512896,-0.9041921022105524,4.506926675177769,-0.8355807146934056,-1.195945255128949,-0.4793118819275238,-1.340724311141059,0.09946001350488004,-0.2909006537314907,1.0841132429155134,0.4019852599236094,0.4032405472272947,0.8684617329191759,-0.5616459090331902,-0.13333986747552765,-0.02951610401317364));
// HP 2 to mics 1, 2, 3, 4
C21 = fi.fir((0.9678478571452631,-1.1215607340624645,-0.6183420250859051,-1.1220111581747216,0.521880473512896,-0.9041921022105524,4.506926675177769,-0.8355807146934056,-1.195945255128949,-0.4793118819275238,-1.340724311141059,0.09946001350488004,-0.2909006537314907,1.0841132429155134,0.4019852599236094,0.4032405472272947,0.8684617329191759,-0.5616459090331902,-0.13333986747552765,-0.02951610401317364));
C22 = fi.fir((0.9678478571452631,-1.1215607340624645,-0.6183420250859051,-1.1220111581747216,0.521880473512896,-0.9041921022105524,4.506926675177769,-0.8355807146934056,-1.195945255128949,-0.4793118819275238,-1.340724311141059,0.09946001350488004,-0.2909006537314907,1.0841132429155134,0.4019852599236094,0.4032405472272947,0.8684617329191759,-0.5616459090331902,-0.13333986747552765,-0.02951610401317364));
C23 = fi.fir((0.9678478571452631,-1.1215607340624645,-0.6183420250859051,-1.1220111581747216,0.521880473512896,-0.9041921022105524,4.506926675177769,-0.8355807146934056,-1.195945255128949,-0.4793118819275238,-1.340724311141059,0.09946001350488004,-0.2909006537314907,1.0841132429155134,0.4019852599236094,0.4032405472272947,0.8684617329191759,-0.5616459090331902,-0.13333986747552765,-0.02951610401317364));
C24 = fi.fir((0.9678478571452631,-1.1215607340624645,-0.6183420250859051,-1.1220111581747216,0.521880473512896,-0.9041921022105524,4.506926675177769,-0.8355807146934056,-1.195945255128949,-0.4793118819275238,-1.340724311141059,0.09946001350488004,-0.2909006537314907,1.0841132429155134,0.4019852599236094,0.4032405472272947,0.8684617329191759,-0.5616459090331902,-0.13333986747552765,-0.02951610401317364));
// HP 3 to mics 1, 2, 3, 4
C31 = fi.fir((0.9678478571452631,-1.1215607340624645,-0.6183420250859051,-1.1220111581747216,0.521880473512896,-0.9041921022105524,4.506926675177769,-0.8355807146934056,-1.195945255128949,-0.4793118819275238,-1.340724311141059,0.09946001350488004,-0.2909006537314907,1.0841132429155134,0.4019852599236094,0.4032405472272947,0.8684617329191759,-0.5616459090331902,-0.13333986747552765,-0.02951610401317364));
C32 = fi.fir((0.9678478571452631,-1.1215607340624645,-0.6183420250859051,-1.1220111581747216,0.521880473512896,-0.9041921022105524,4.506926675177769,-0.8355807146934056,-1.195945255128949,-0.4793118819275238,-1.340724311141059,0.09946001350488004,-0.2909006537314907,1.0841132429155134,0.4019852599236094,0.4032405472272947,0.8684617329191759,-0.5616459090331902,-0.13333986747552765,-0.02951610401317364));
C33 = fi.fir((0.9678478571452631,-1.1215607340624645,-0.6183420250859051,-1.1220111581747216,0.521880473512896,-0.9041921022105524,4.506926675177769,-0.8355807146934056,-1.195945255128949,-0.4793118819275238,-1.340724311141059,0.09946001350488004,-0.2909006537314907,1.0841132429155134,0.4019852599236094,0.4032405472272947,0.8684617329191759,-0.5616459090331902,-0.13333986747552765,-0.02951610401317364));
C34 = fi.fir((0.9678478571452631,-1.1215607340624645,-0.6183420250859051,-1.1220111581747216,0.521880473512896,-0.9041921022105524,4.506926675177769,-0.8355807146934056,-1.195945255128949,-0.4793118819275238,-1.340724311141059,0.09946001350488004,-0.2909006537314907,1.0841132429155134,0.4019852599236094,0.4032405472272947,0.8684617329191759,-0.5616459090331902,-0.13333986747552765,-0.02951610401317364));
// HP 4 to mics 1, 2, 3, 4
C41 = fi.fir((0.9678478571452631,-1.1215607340624645,-0.6183420250859051,-1.1220111581747216,0.521880473512896,-0.9041921022105524,4.506926675177769,-0.8355807146934056,-1.195945255128949,-0.4793118819275238,-1.340724311141059,0.09946001350488004,-0.2909006537314907,1.0841132429155134,0.4019852599236094,0.4032405472272947,0.8684617329191759,-0.5616459090331902,-0.13333986747552765,-0.02951610401317364));
C42 = fi.fir((0.9678478571452631,-1.1215607340624645,-0.6183420250859051,-1.1220111581747216,0.521880473512896,-0.9041921022105524,4.506926675177769,-0.8355807146934056,-1.195945255128949,-0.4793118819275238,-1.340724311141059,0.09946001350488004,-0.2909006537314907,1.0841132429155134,0.4019852599236094,0.4032405472272947,0.8684617329191759,-0.5616459090331902,-0.13333986747552765,-0.02951610401317364));
C43 = fi.fir((0.9678478571452631,-1.1215607340624645,-0.6183420250859051,-1.1220111581747216,0.521880473512896,-0.9041921022105524,4.506926675177769,-0.8355807146934056,-1.195945255128949,-0.4793118819275238,-1.340724311141059,0.09946001350488004,-0.2909006537314907,1.0841132429155134,0.4019852599236094,0.4032405472272947,0.8684617329191759,-0.5616459090331902,-0.13333986747552765,-0.02951610401317364));
C44 = fi.fir((0.9678478571452631,-1.1215607340624645,-0.6183420250859051,-1.1220111581747216,0.521880473512896,-0.9041921022105524,4.506926675177769,-0.8355807146934056,-1.195945255128949,-0.4793118819275238,-1.340724311141059,0.09946001350488004,-0.2909006537314907,1.0841132429155134,0.4019852599236094,0.4032405472272947,0.8684617329191759,-0.5616459090331902,-0.13333986747552765,-0.02951610401317364));

C_stack = (_:C11), (_:C12), (_:C13), (_:C14), (_:C21), (_:C22), (_:C23), (_:C24), (_:C31), (_:C32), (_:C33), (_:C34), (_:C41), (_:C42), (_:C43), (_:C44);

C_hat = _<:par(i,in*out,_):C_stack:par(i,in*out,buffer):ro.interleave(N,in*out):par(i,N,ro.interleave(in,out):par(i,out,(par(i,in,_):>_))); 

buffer = _<:par(i,N,@(i)); // To obtain x_n the reference signal at time n

norm2(n) = par(i,n,^(2)):>sqrt:_^(2); 

E = par(i,in,_<:(_,_)):par(i,in,(((_':_^(2):_*(1-lambda)),(*(lambda))):>_));

LMS = ((par(i,in*N,_<:(_,_)):ro.interleave(2,N*in):(si.bus(N*in),norm2(in*N))), (par(i,in,_<:(_,_)):ro.interleave(2,in):(si.bus(in),E))):(si.bus(in*N),ro.cross1n(in), si.bus(in)):(si.bus(in*N),par(i,in,_*mu), (((_<:par(i,in,_)), si.bus(in)):ro.interleave(in,2):par(i,in,(_,_):>_):par(i,in,_+delta))):(si.bus(N*in),(ro.interleave(in,2):par(i,in,/))):(si.bus(in*N),par(i,in,_<:par(i,N,_))):(ro.interleave(N*in,2):par(i,in*N,*)):ro.interleave(in,N);

// 4 inputs / 6 outputs
// INPUTS : 4 microphones
// OUTPUTS : 4 Loudspeaker signals, 1 reference signal, 1 rms error signal

process = ((par(i,in,coeffs), x, par(i,in,_)):(H,C_hat,(ro.cross1n(in):((par(i,in,_<:(_,_)):ro.interleave(2,in)),_))):(si.bus(N*in+out),LMS,norm2(in),_):(par(i,in,si.bus(N)),ro.crossNM(in,in*N),_,_):((ro.interleave(in*N,2):par(i,in*N,+)),si.bus(in),_,_))~(par(i,in,coeffs)):(par(i,in*N,!),si.bus(in),ro.cross1n(1));


