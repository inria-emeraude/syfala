/******************************************************************************
 * @file ADAU1761Reg.cpp
 * Autogenerated with sigmaS_to_syfala_generator.tcl.
 * Registers configuration for ADAU1761
 * Based on X_IC_1_REG.h file, generated with Sigma Studio 
 * This file doesn't need to be regenerated each time. Only the header file configures the registers.
 * 
 * @authors M.POPOFF
 * @date: 03/01/2023 15:30:25
 * 
 *****************************************************************************/

#include <syfala/arm/codecs/ADAU17xx.hpp>
#include <syfala/arm/codecs/ADAU1761Reg.h>
#include <syfala/arm/gpio.hpp>
#include <syfala/utilities.hpp>

#define CTARGET "[ADAU1761]"

#define REGWRITE(_A, _D, _O)                                                    \
if (ADAU17xx::regwrite(bus, codec_addr, _A, _D, _O)!= XST_SUCCESS) {                          \
    sy_debug("\033[2K%s Could not write to register 0x%02x \n\r",CTARGET, _A);       \
    return XST_FAILURE;                                                                   \
}

namespace Syfala::ADAU1761 {
int initialize(int bus, unsigned long codec_addr) {
	REGWRITE(R0_CLOCK_CONTROL_ADDR, R0_CLOCK_CONTROL_VALUE, 0)
//	REGWRITE(R1_PLL_CONTROL_ADDR, R1_PLL_CONTROL_VALUE, 0)
//	REGWRITE(R2_DIGITAL_MIC_JACK_DETECTION_CONTROL_ADDR, R2_DIGITAL_MIC_JACK_DETECTION_CONTROL_VALUE, 0)
//	REGWRITE(R3_RECORD_POWER_MANAGEMENT_ADDR, R3_RECORD_POWER_MANAGEMENT_VALUE, 0)
	REGWRITE(R4_RECORD_MIXER_LEFT_CONTROL_0_ADDR, R4_RECORD_MIXER_LEFT_CONTROL_0_VALUE, 0)
	REGWRITE(R5_RECORD_MIXER_LEFT_CONTROL_1_ADDR, R5_RECORD_MIXER_LEFT_CONTROL_1_VALUE, 0)
	REGWRITE(R6_RECORD_MIXER_RIGHT_CONTROL_0_ADDR, R6_RECORD_MIXER_RIGHT_CONTROL_0_VALUE, 0)
	REGWRITE(R7_RECORD_MIXER_RIGHT_CONTROL_1_ADDR, R7_RECORD_MIXER_RIGHT_CONTROL_1_VALUE, 0)
	REGWRITE(R8_LEFT_DIFFERENTIAL_INPUT_VOLUME_CONTROL_ADDR, R8_LEFT_DIFFERENTIAL_INPUT_VOLUME_CONTROL_VALUE, 0)
	REGWRITE(R9_RIGHT_DIFFERENTIAL_INPUT_VOLUME_CONTROL_ADDR, R9_RIGHT_DIFFERENTIAL_INPUT_VOLUME_CONTROL_VALUE, 0)
	REGWRITE(R10_RECORD_MICROPHONE_BIAS_CONTROL_ADDR, R10_RECORD_MICROPHONE_BIAS_CONTROL_VALUE, 0)
//	REGWRITE(R11_ALC_CONTROL_0_ADDR, R11_ALC_CONTROL_0_VALUE, 0)
//	REGWRITE(R12_ALC_CONTROL_1_ADDR, R12_ALC_CONTROL_1_VALUE, 0)
//	REGWRITE(R13_ALC_CONTROL_2_ADDR, R13_ALC_CONTROL_2_VALUE, 0)
//	REGWRITE(R14_ALC_CONTROL_3_ADDR, R14_ALC_CONTROL_3_VALUE, 0)
	REGWRITE(R15_SERIAL_PORT_CONTROL_0_ADDR, R15_SERIAL_PORT_CONTROL_0_VALUE, 0)
	REGWRITE(R16_SERIAL_PORT_CONTROL_1_ADDR, R16_SERIAL_PORT_CONTROL_1_VALUE, 0)
	REGWRITE(R17_CONVERTER_CONTROL_0_ADDR, R17_CONVERTER_CONTROL_0_VALUE, 0)
//	REGWRITE(R18_CONVERTER_CONTROL_1_ADDR, R18_CONVERTER_CONTROL_1_VALUE, 0)
	REGWRITE(R19_ADC_CONTROL_ADDR, R19_ADC_CONTROL_VALUE, 0)
//	REGWRITE(R20_LEFT_INPUT_DIGITAL_VOLUME_ADDR, R20_LEFT_INPUT_DIGITAL_VOLUME_VALUE, 0)
//	REGWRITE(R21_RIGHT_INPUT_DIGITAL_VOLUME_ADDR, R21_RIGHT_INPUT_DIGITAL_VOLUME_VALUE, 0)
	REGWRITE(R22_PLAYBACK_MIXER_LEFT_CONTROL_0_ADDR, R22_PLAYBACK_MIXER_LEFT_CONTROL_0_VALUE, 0)
	REGWRITE(R23_PLAYBACK_MIXER_LEFT_CONTROL_1_ADDR, R23_PLAYBACK_MIXER_LEFT_CONTROL_1_VALUE, 0)
	REGWRITE(R24_PLAYBACK_MIXER_RIGHT_CONTROL_0_ADDR, R24_PLAYBACK_MIXER_RIGHT_CONTROL_0_VALUE, 0)
	REGWRITE(R25_PLAYBACK_MIXER_RIGHT_CONTROL_1_ADDR, R25_PLAYBACK_MIXER_RIGHT_CONTROL_1_VALUE, 0)
	REGWRITE(R26_PLAYBACK_LR_MIXER_LEFT_LINE_OUTPUT_CONTROL_ADDR, R26_PLAYBACK_LR_MIXER_LEFT_LINE_OUTPUT_CONTROL_VALUE, 0)
	REGWRITE(R27_PLAYBACK_LR_MIXER_RIGHT_LINE_OUTPUT_CONTROL_ADDR, R27_PLAYBACK_LR_MIXER_RIGHT_LINE_OUTPUT_CONTROL_VALUE, 0)
	REGWRITE(R28_PLAYBACK_LR_MIXER_MONO_OUTPUT_CONTROL_ADDR, R28_PLAYBACK_LR_MIXER_MONO_OUTPUT_CONTROL_VALUE, 0)
	REGWRITE(R29_PLAYBACK_HEADPHONE_LEFT_VOLUME_CONTROL_ADDR, R29_PLAYBACK_HEADPHONE_LEFT_VOLUME_CONTROL_VALUE, 0)
	REGWRITE(R30_PLAYBACK_HEADPHONE_RIGHT_VOLUME_CONTROL_ADDR, R30_PLAYBACK_HEADPHONE_RIGHT_VOLUME_CONTROL_VALUE, 0)
	REGWRITE(R31_PLAYBACK_LINE_OUTPUT_LEFT_VOLUME_CONTROL_ADDR, R31_PLAYBACK_LINE_OUTPUT_LEFT_VOLUME_CONTROL_VALUE, 0)
	REGWRITE(R32_PLAYBACK_LINE_OUTPUT_RIGHT_VOLUME_CONTROL_ADDR, R32_PLAYBACK_LINE_OUTPUT_RIGHT_VOLUME_CONTROL_VALUE, 0)
	REGWRITE(R33_PLAYBACK_MONO_OUTPUT_CONTROL_ADDR, R33_PLAYBACK_MONO_OUTPUT_CONTROL_VALUE, 0)
	REGWRITE(R34_PLAYBACK_POP_CLICK_SUPPRESSION_ADDR, R34_PLAYBACK_POP_CLICK_SUPPRESSION_VALUE, 0)
	REGWRITE(R35_PLAYBACK_POWER_MANAGEMENT_ADDR, R35_PLAYBACK_POWER_MANAGEMENT_VALUE, 0)
	REGWRITE(R36_DAC_CONTROL_0_ADDR, R36_DAC_CONTROL_0_VALUE, 0)
//	REGWRITE(R37_DAC_CONTROL_1_ADDR, R37_DAC_CONTROL_1_VALUE, 0)
//	REGWRITE(R38_DAC_CONTROL_2_ADDR, R38_DAC_CONTROL_2_VALUE, 0)
//	REGWRITE(R39_SERIAL_PORT_PAD_CONTROL_ADDR, R39_SERIAL_PORT_PAD_CONTROL_VALUE, 0)
//	REGWRITE(R40_CONTROL_PORT_PAD_CONTROL_0_ADDR, R40_CONTROL_PORT_PAD_CONTROL_0_VALUE, 0)
//	REGWRITE(R41_CONTROL_PORT_PAD_CONTROL_1_ADDR, R41_CONTROL_PORT_PAD_CONTROL_1_VALUE, 0)
//	REGWRITE(R42_JACK_DETECT_PIN_CONTROL_ADDR, R42_JACK_DETECT_PIN_CONTROL_VALUE, 0)
//	REGWRITE(R67_DEJITTER_CONTROL_ADDR, R67_DEJITTER_CONTROL_VALUE, 0)
	REGWRITE(R58_SERIAL_INPUT_ROUTE_CONTROL_ADDR, R58_SERIAL_INPUT_ROUTE_CONTROL_VALUE, 0)
	REGWRITE(R59_SERIAL_OUTPUT_ROUTE_CONTROL_ADDR, R59_SERIAL_OUTPUT_ROUTE_CONTROL_VALUE, 0)
	REGWRITE(R60_SERIAL_DATA_GPIO_CONGIURATION_ADDR, R60_SERIAL_DATA_GPIO_CONGIURATION_VALUE, 0)
//	REGWRITE(R61_DSP_ENABLE_ADDR, R61_DSP_ENABLE_VALUE, 0)
//	REGWRITE(R62_DSP_RUN_ADDR, R62_DSP_RUN_VALUE, 0)
//	REGWRITE(R63_DSP_SLEW_MODES_ADDR, R63_DSP_SLEW_MODES_VALUE, 0)
	REGWRITE(R64_SERIAL_PORT_SAMPLING_RATE_ADDR, R64_SERIAL_PORT_SAMPLING_RATE_VALUE, 0)
	REGWRITE(R65_CLOCK_ENABLE_0_ADDR, R65_CLOCK_ENABLE_0_VALUE, 0)
	REGWRITE(R66_CLOCK_ENABLE_1_ADDR, R66_CLOCK_ENABLE_1_VALUE, 0)
    return XST_SUCCESS;
}
}
